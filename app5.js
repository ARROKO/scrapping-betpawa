require("dotenv").config();
const puppeteer = require("puppeteer");
const readline = require("readline");

// ===== FONCTION DE D√âLAI =====
const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

// Interface pour poser les questions
function poserQuestion(question) {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });
  
  return new Promise((resolve) => {
    rl.question(question, (reponse) => {
      rl.close();
      resolve(reponse.trim());
    });
  });
}

async function demanderParametres() {
  console.log("=".repeat(60));
  console.log("üéÆ CONFIGURATION DU BOT BETPAWA");
  console.log("=".repeat(60));
  
  // 1. Connexion automatique
  console.log("\nüîê Connexion automatique :");
  console.log("OUI : Connexion automatique avec .env");
  console.log("NON : Connexion manuelle");
  
  let connexionAuto;
  do {
    const input = await poserQuestion("Utiliser la connexion automatique ? (oui/non) : ");
    if (['oui', 'o', 'yes', 'y', '1'].includes(input.toLowerCase())) {
      connexionAuto = true;
    } else if (['non', 'n', 'no', '0'].includes(input.toLowerCase())) {
      connexionAuto = false;
    } else {
      console.log("‚ùå Veuillez r√©pondre par 'oui' ou 'non'");
      connexionAuto = null;
    }
  } while (connexionAuto === null);

  // 2. Choix de la strat√©gie
  console.log("\nüìã Choisissez une strat√©gie de paris :");
  console.log("1. Double chance (Conservateur) ‚≠ê RECOMMAND√â");
  console.log("2. Juste victoire (√âquilibr√©)");
  console.log("3. Plus de 0.5 but (Sp√©cialis√©)");
  console.log("4. Double chance + victoire (Agressif)");
  console.log("5. Double chance + Plus de 0.5 but (Mixte)");
  console.log("6. Juste victoire + Plus de 0.5 but (Ultra)");
  
  let choixStrategie;
  do {
    choixStrategie = await poserQuestion("Votre choix (1-6) : ");
  } while (!['1', '2', '3', '4', '5', '6'].includes(choixStrategie));

  // 3. Cote totale cible
  console.log("\nüéØ Objectif de cote totale :");
  console.log("Exemples : 10 (facile), 50 (moyen), 100 (difficile), 500 (expert)");
  
  let coteTarget;
  do {
    const input = await poserQuestion("Cote totale √† atteindre (minimum 5) : ");
    coteTarget = parseFloat(input);
    if (isNaN(coteTarget) || coteTarget < 5) {
      console.log("‚ùå Veuillez entrer un nombre valide ‚â• 5");
      coteTarget = null;
    }
  } while (!coteTarget);

  // 4. Cote maximale par pari
  console.log("\n‚öñÔ∏è Limite de cote par pari :");
  console.log("Exemples : 1.5 (tr√®s s√ªr), 2.0 (s√ªr), 2.5 (√©quilibr√©), 3.0 (risqu√©)");
  
  let coteMaxPari;
  do {
    const input = await poserQuestion("Cote maximale par pari (1.1 - 5.0) : ");
    coteMaxPari = parseFloat(input);
    if (isNaN(coteMaxPari) || coteMaxPari < 1.1 || coteMaxPari > 5.0) {
      console.log("‚ùå Veuillez entrer un nombre entre 1.1 et 5.0");
      coteMaxPari = null;
    }
  } while (!coteMaxPari);

  // 5. Mode al√©atoire
  console.log("\nüé≤ Mode de s√©lection :");
  console.log("OUI : S√©lection intelligente et al√©atoire (recommand√©)");
  console.log("NON : S√©lection s√©quentielle classique");
  
  let modeAleatoire;
  do {
    const input = await poserQuestion("Utiliser le mode al√©atoire ? (oui/non) : ");
    if (['oui', 'o', 'yes', 'y', '1'].includes(input.toLowerCase())) {
      modeAleatoire = true;
    } else if (['non', 'n', 'no', '0'].includes(input.toLowerCase())) {
      modeAleatoire = false;
    } else {
      console.log("‚ùå Veuillez r√©pondre par 'oui' ou 'non'");
      modeAleatoire = null;
    }
  } while (modeAleatoire === null);

  // 6. Montant de mise
  let montantMise;
  do {
    const input = await poserQuestion("\nüí∞ Montant de la mise (minimum 1) : ");
    montantMise = parseFloat(input);
    if (isNaN(montantMise) || montantMise < 1) {
      console.log("‚ùå Veuillez entrer un montant valide ‚â• 1");
      montantMise = null;
    }
  } while (!montantMise);

  // 7. Placement automatique
  console.log("\nüé∞ Placement de mise :");
  console.log("OUI : Placement automatique d√®s que l'objectif est atteint");
  console.log("NON : Arr√™t pour placement manuel");
  
  let placementAuto;
  do {
    const input = await poserQuestion("Placement automatique ? (oui/non) : ");
    if (['oui', 'o', 'yes', 'y', '1'].includes(input.toLowerCase())) {
      placementAuto = true;
    } else if (['non', 'n', 'no', '0'].includes(input.toLowerCase())) {
      placementAuto = false;
    } else {
      console.log("‚ùå Veuillez r√©pondre par 'oui' ou 'non'");
      placementAuto = null;
    }
  } while (placementAuto === null);

  // 8. Confirmation
  console.log("\n" + "=".repeat(50));
  console.log("üìã R√âCAPITULATIF DE LA CONFIGURATION");
  console.log("=".repeat(50));
  console.log(`üîê Connexion auto: ${connexionAuto ? 'OUI' : 'NON'}`);
  console.log(`üéÆ Strat√©gie: Option ${choixStrategie}`);
  console.log(`üéØ Cote cible: ${coteTarget}x`);
  console.log(`‚öñÔ∏è Cote max/pari: ${coteMaxPari}x`);
  console.log(`üé≤ Mode al√©atoire: ${modeAleatoire ? 'OUI' : 'NON'}`);
  console.log(`üí∞ Mise: ${montantMise}`);
  console.log(`üé∞ Placement auto: ${placementAuto ? 'OUI' : 'NON'}`);
  console.log("=".repeat(50));
  
  const confirmation = await poserQuestion("\n‚úÖ Confirmer ces param√®tres ? (oui/non) : ");
  
  if (!['oui', 'o', 'yes', 'y', '1'].includes(confirmation.toLowerCase())) {
    console.log("‚ùå Configuration annul√©e.");
    process.exit(0);
  }

  return {
    connexionAuto,
    strategie: choixStrategie,
    coteTarget: coteTarget,
    coteMaxPari: coteMaxPari,
    modeAleatoire: modeAleatoire,
    montantMise: montantMise,
    placementAuto: placementAuto
  };
}

// ===== FONCTION DE CONNEXION =====
async function connexionAutomatique(page) {
  try {
    console.log("üîê D√©but de la connexion automatique...");

    // V√©rifier les variables d'environnement
    if (!process.env.COUNTRY_CODE || !process.env.PHONE_NUMBER || !process.env.PASSWORD) {
      console.log("‚ùå Variables d'environnement manquantes");
      console.log("Ajoutez dans votre .env :");
      console.log("COUNTRY_CODE=+237");
      console.log("PHONE_NUMBER=votre_numero");
      console.log("PASSWORD=votre_mot_de_passe");
      return false;
    }

    // Cliquer sur le bouton Connexion
    await page.waitForSelector('a.button.button-accent[href="/login"]', { timeout: 10000 });
    await page.click('a.button.button-accent[href="/login"]');
    console.log("‚úÖ Clic sur le bouton connexion");

    // Remplir le code pays
    await page.waitForSelector(".country-code", { timeout: 5000 });
    await page.type(".country-code", process.env.COUNTRY_CODE);
    console.log("‚úÖ Code pays saisi");

    // Remplir le num√©ro de t√©l√©phone
    await page.waitForSelector("#login-form-phoneNumber", { timeout: 5000 });
    await page.type("#login-form-phoneNumber", process.env.PHONE_NUMBER);
    console.log("‚úÖ Num√©ro de t√©l√©phone saisi");

    // Remplir le mot de passe
    await page.waitForSelector("#login-form-password-input", { timeout: 5000 });
    await page.type("#login-form-password-input", process.env.PASSWORD);
    console.log("‚úÖ Mot de passe saisi");

    // Cliquer sur le bouton de connexion
    await page.click('input[data-test-id="logInButton"]');
    console.log("‚úÖ Clic sur le bouton de connexion");

    // Attendre la connexion
    await page.waitForSelector(".balance", { timeout: 10000 });
    console.log("‚úÖ Connexion r√©ussie!");

    // R√©cup√©rer et afficher le solde
    const soldeNum = await recupererSolde(page);
    console.log("üí∞ Solde actuel:", soldeNum);

    if (soldeNum <= 0) {
      console.log("‚ùå Solde insuffisant:", soldeNum);
      return false;
    }

    console.log("‚úÖ Solde suffisant pour continuer");
    return true;

  } catch (error) {
    console.error("‚ùå Erreur de connexion:", error.message);
    return false;
  }
}

// ===== FONCTION DE R√âCUP√âRATION DU SOLDE =====
async function recupererSolde(page) {
  try {
    const soldeText = await page.$eval("span.button.balance", (span) => span.textContent.trim());
    const match = soldeText.match(/[\d,.]+/);
    return match ? parseFloat(match[0].replace(",", ".")) : 0;
  } catch (error) {
    console.log("‚ö†Ô∏è Impossible de r√©cup√©rer le solde");
    return 0;
  }
}

// ===== FONCTION DE S√âLECTION DOUBLE CHANCE AM√âLIOR√âE =====
async function selectDoubleChance(page) {
  try {
    console.log("üîç Recherche des options Double Chance...");
    
    // Attendre que la section Double Chance soit visible
    await page.waitForSelector('[data-test-id="market-4693"]', { timeout: 15000 });
    console.log("‚úÖ Section Double Chance trouv√©e");
    
    // Attendre un peu plus pour s'assurer que tout est charg√©
    await delay(2000);
    
    // R√©cup√©rer les options double chance avec une approche plus robuste
    const doubleChanceOptions = await page.evaluate(() => {
      const options = [];
      
      // 1X (Domicile ou Match Nul)
      const bet1X = document.querySelector('[data-test-id="Odd-4693-4694"]');
      if (bet1X) {
        const selection = bet1X.querySelector('.event-selection');
        const oddsSpan = bet1X.querySelector('.event-odds span:not(.svg-icon)');
        if (selection && oddsSpan) {
          options.push({
            selector: '[data-test-id="Odd-4693-4694"] .event-bet',
            selection: selection.textContent.trim(),
            odds: parseFloat(oddsSpan.textContent.replace(',', '.'))
          });
        }
      }
      
      // X2 (Match Nul ou Ext√©rieur)
      const betX2 = document.querySelector('[data-test-id="Odd-4693-4695"]');
      if (betX2) {
        const selection = betX2.querySelector('.event-selection');
        const oddsSpan = betX2.querySelector('.event-odds span:not(.svg-icon)');
        if (selection && oddsSpan) {
          options.push({
            selector: '[data-test-id="Odd-4693-4695"] .event-bet',
            selection: selection.textContent.trim(),
            odds: parseFloat(oddsSpan.textContent.replace(',', '.'))
          });
        }
      }
      
      // 12 (Domicile ou Ext√©rieur)
      const bet12 = document.querySelector('[data-test-id="Odd-4693-4696"]');
      if (bet12) {
        const selection = bet12.querySelector('.event-selection');
        const oddsSpan = bet12.querySelector('.event-odds span:not(.svg-icon)');
        if (selection && oddsSpan) {
          options.push({
            selector: '[data-test-id="Odd-4693-4696"] .event-bet',
            selection: selection.textContent.trim(),
            odds: parseFloat(oddsSpan.textContent.replace(',', '.'))
          });
        }
      }
      
      return options;
    });

    if (doubleChanceOptions.length === 0) {
      throw new Error("Aucune option Double Chance trouv√©e");
    }

    console.log(`üìä Options trouv√©es: ${doubleChanceOptions.map(o => `${o.selection} @${o.odds}`).join(', ')}`);

    // Choisir la meilleure option (cote la plus basse = plus s√ªre)
    const bestOption = doubleChanceOptions.reduce((best, current) => 
      current.odds < best.odds ? current : best
    );

    console.log(`üéØ S√©lection: ${bestOption.selection} @${bestOption.odds}`);

    // Cliquer sur la meilleure option avec retry
    let clickSuccess = false;
    for (let attempt = 1; attempt <= 3; attempt++) {
      try {
        await page.click(bestOption.selector);
        await delay(3000); // Attendre plus longtemps
        
        // V√©rifier que l'option est s√©lectionn√©e
        const isSelected = await page.evaluate((selector) => {
          const element = document.querySelector(selector);
          return element && element.classList.contains('selected');
        }, bestOption.selector);

        if (isSelected) {
          clickSuccess = true;
          console.log("‚úÖ Option Double Chance s√©lectionn√©e avec succ√®s !");
          break;
        } else {
          console.log(`‚ö†Ô∏è Tentative ${attempt}/3 - Pas encore s√©lectionn√©`);
          if (attempt < 3) await delay(2000);
        }
      } catch (error) {
        console.log(`‚ö†Ô∏è Tentative ${attempt}/3 √©chou√©e:`, error.message);
        if (attempt < 3) await delay(2000);
      }
    }

    if (clickSuccess) {
      return {
        success: true,
        selection: bestOption.selection,
        odds: bestOption.odds,
        type: 'double_chance'
      };
    } else {
      throw new Error("Impossible de s√©lectionner l'option apr√®s 3 tentatives");
    }

  } catch (error) {
    console.error("‚ùå Erreur lors de la s√©lection Double Chance:", error.message);
    return {
      success: false,
      error: error.message
    };
  }
}

// ===== FONCTION DE TRAITEMENT DE MATCH AM√âLIOR√âE =====
async function processMatchRobust(page, teamNames, href, strategy) {
  try {
    console.log(`üîç Analyse: ${teamNames}`);
    
    // Naviguer directement avec l'URL du match
    const matchUrl = `https://www.betpawa.cm${href}`;
    console.log(`üåê Navigation vers: ${matchUrl}`);
    
    await page.goto(matchUrl, { 
      waitUntil: "networkidle2", 
      timeout: 30000 
    });
    
    console.log("‚úÖ Page du match charg√©e");

    // S√©lectionner la strat√©gie appropri√©e
    let result;
    if (strategy === '1' || strategy.includes('double_chance')) {
      result = await selectDoubleChance(page);
    } else {
      result = { success: false, error: "Strat√©gie non impl√©ment√©e" };
    }
    
    return result;

  } catch (error) {
    console.error("‚ùå Erreur lors du traitement du match:", error.message);
    return {
      success: false,
      error: error.message
    };
  }
}

// ===== FONCTION DE PLACEMENT DE MISE =====
async function placerMise(page, montant) {
  try {
    console.log("üíµ D√©but du placement de mise...");

    // 1. R√©cup√©rer le solde initial
    const soldeInitial = await recupererSolde(page);
    console.log(`üí∞ Solde initial: ${soldeInitial}`);

    if (soldeInitial < montant) {
      console.log("‚ùå Solde insuffisant pour cette mise");
      return false;
    }

    // 2. Attendre que le champ de mise soit disponible
    await page.waitForSelector("#betslip-form-stake-input", { timeout: 10000 });
    
    // 3. Effacer le champ et saisir le montant
    await page.focus("#betslip-form-stake-input");
    await page.keyboard.down("Control");
    await page.keyboard.press("A");
    await page.keyboard.up("Control");
    await page.keyboard.press("Backspace");
    await page.type("#betslip-form-stake-input", montant.toString(), { delay: 100 });
    
    console.log(`üí∞ Montant saisi: ${montant}`);

    // 4. Attendre et cliquer sur le bouton de placement
    await page.waitForSelector(".place-bet.button-primary", { timeout: 5000 });
    await page.click(".place-bet.button-primary");
    
    console.log("üé∞ Pari en cours de placement...");
    
    // 5. Attendre le traitement (5 secondes pour √™tre s√ªr)
    await new Promise(resolve => setTimeout(resolve, 5000));

    // 6. V√©rifier le nouveau solde
    const nouveauSolde = await recupererSolde(page);
    console.log(`üí∞ Nouveau solde: ${nouveauSolde}`);

    // 7. Calculer la diff√©rence
    const difference = soldeInitial - nouveauSolde;
    console.log(`üìä Diff√©rence: ${difference.toFixed(2)}`);

    // 8. V√©rifier si le montant a √©t√© pr√©lev√© (avec une petite tol√©rance)
    const tolerance = 0.1; // Tol√©rance de 0.1 pour les arrondis
    const miseReussie = Math.abs(difference - montant) <= tolerance;

    if (miseReussie) {
      console.log("‚úÖ Pari confirm√© ! Montant pr√©lev√© du solde.");
      console.log(`üíµ Solde avant: ${soldeInitial} | Solde apr√®s: ${nouveauSolde}`);
      return true;
    } else {
      console.log("‚ùå Pari non confirm√© - Solde inchang√©");
      console.log("üí≠ Possible: limite de mise, erreur syst√®me, ou pari rejet√©");
      return false;
    }

  } catch (error) {
    console.error("‚ùå Erreur lors du placement:", error.message);
    return false;
  }
}

// ===== FONCTION D'ARR√äT PROPRE =====
async function arreterApplication(browser, success = true) {
  console.log("\n" + "=".repeat(60));
  if (success) {
    console.log("üéâ MISSION ACCOMPLIE ! BOT TERMIN√â AVEC SUCC√àS");
  } else {
    console.log("‚ö†Ô∏è MISSION PARTIELLEMENT ACCOMPLIE");
  }
  console.log("=".repeat(60));
  
  console.log("üìä Fermeture du navigateur dans 5 secondes...");
  await new Promise(resolve => setTimeout(resolve, 5000));
  
  try {
    await browser.close();
    console.log("‚úÖ Navigateur ferm√©");
  } catch (error) {
    console.log("‚ö†Ô∏è Erreur fermeture navigateur:", error.message);
  }
  
  console.log("üõë Application termin√©e");
  process.exit(success ? 0 : 1);
}

// ===== FONCTION DE D√âFILEMENT AUTOMATIQUE =====
async function autoScroll(page) {
  try {
    console.log("üìú D√©filement pour charger plus de matchs...");
    
    await page.evaluate(async () => {
      await new Promise((resolve) => {
        let scrollPosition = 0;
        const scrollInterval = setInterval(() => {
          window.scrollBy(0, 800);
          scrollPosition += 800;

          if (scrollPosition >= 4000) {
            clearInterval(scrollInterval);
            resolve();
          }
        }, 300);
      });
    });
    
    await delay(5000); // Attendre que le contenu se charge
    console.log("‚úÖ D√©filement termin√©");
    
  } catch (error) {
    console.log("‚ö†Ô∏è Erreur pendant le d√©filement:", error.message);
  }
}

// ===== FONCTION PRINCIPALE DE PARIS DOUBLE CHANCE CORRIG√âE =====
async function smartDoubleChanceBetting(page, targetOdds, coteMaxPari, modeAleatoire) {
  let currentTotal = 1;
  let selectedMatches = 0;
  let consecutiveNoMatches = 0;
  const MAX_CONSECUTIVE_NO_MATCHES = 3; // R√©duit pour scroll plus t√¥t
  const usedMatches = new Set();
  const MAX_MATCHES = 15; // Limite pour √©viter les boucles infinies

  console.log(`üéØ Strat√©gie: Double Chance`);
  console.log(`üéØ Objectif: ${targetOdds}x | Cote max: ${coteMaxPari}x`);
  console.log(`üéÆ Mode: ${modeAleatoire ? 'AL√âATOIRE' : 'S√âQUENTIEL'}`);

  while (currentTotal < targetOdds && selectedMatches < MAX_MATCHES) {
    console.log(`\nüî¢ Total actuel: ${currentTotal.toFixed(2)} (Objectif: ${targetOdds})`);
    console.log(`üìä Matchs s√©lectionn√©s: ${selectedMatches}`);

    try {
      // Retourner √† la liste des matchs si n√©cessaire
      const currentUrl = page.url();
      if (!currentUrl.includes('events?marketId=1X2')) {
        console.log("üîô Retour √† la liste des matchs...");
        await page.goto("https://www.betpawa.cm/events?marketId=1X2&categoryId=2", {
          waitUntil: "networkidle2",
          timeout: 30000
        });
        await delay(3000);
      }

      // Attendre et r√©cup√©rer les informations des matchs
      await page.waitForSelector('.game-event-wrapper', { timeout: 10000 });
      
      const matchesInfo = await page.evaluate(() => {
        const matches = Array.from(document.querySelectorAll('.game-event-wrapper'));
        return matches.map((match, index) => {
          try {
            const teams = Array.from(match.querySelectorAll('.scoreboard-participant-name'))
              .map(team => team.textContent.trim());
            const href = match.getAttribute('href');
            return { 
              teams: teams, 
              href: href,
              teamNames: teams.length >= 2 ? `${teams[0]} vs ${teams[1]}` : `match_${index}`,
              index: index
            };
          } catch (e) {
            return null;
          }
        }).filter(match => match !== null);
      });

      console.log(`üìã ${matchesInfo.length} matchs disponibles`);

      let foundValidMatch = false;

      for (const matchInfo of matchesInfo) {
        const matchKey = matchInfo.teamNames;
        
        if (usedMatches.has(matchKey)) {
          console.log(`‚è≠Ô∏è Match d√©j√† trait√©: ${matchKey}`);
          continue;
        }

        const result = await processMatchRobust(page, matchInfo.teamNames, matchInfo.href, '1');

        if (result.success) {
          // CORRECTION: Utiliser <= au lieu de < pour inclure la limite exacte
          if (result.odds <= coteMaxPari) {
            currentTotal *= result.odds;
            selectedMatches++;
            foundValidMatch = true;
            usedMatches.add(matchKey);
            
            console.log(`‚úÖ Match s√©lectionn√©! ${result.selection} @${result.odds}`);
            console.log(`üéØ Nouveau total: ${currentTotal.toFixed(2)}`);
            
            // V√©rifier si l'objectif est atteint
            if (currentTotal >= targetOdds) {
              console.log(`üéâ Objectif atteint ! Total: ${currentTotal.toFixed(2)}`);
              break;
            }
            
            break; // Sortir de la boucle des matchs pour recommencer la recherche
          } else {
            console.log(`‚ö†Ô∏è Cote trop √©lev√©e: ${result.odds} > ${coteMaxPari} (ignor√©)`);
            usedMatches.add(matchKey);
          }
        } else {
          usedMatches.add(matchKey); // Marquer comme trait√© m√™me si √©chec
          console.log(`‚ùå √âchec sur: ${matchKey} - ${result.error}`);
        }
      }

      if (!foundValidMatch) {
        consecutiveNoMatches++;
        console.log(`üîÑ Aucun match valide trouv√© (${consecutiveNoMatches}/${MAX_CONSECUTIVE_NO_MATCHES})`);
        
        if (consecutiveNoMatches >= MAX_CONSECUTIVE_NO_MATCHES) {
          console.log("üìú Tentative de scroll pour plus de matchs...");
          await autoScroll(page);
          consecutiveNoMatches = 0; // Reset le compteur apr√®s scroll
          usedMatches.clear(); // Effacer la liste pour permettre de re-tenter
        }
      } else {
        consecutiveNoMatches = 0;
      }

    } catch (error) {
      console.error("üö® Erreur g√©n√©rale:", error.message);
      consecutiveNoMatches++;
      await delay(5000); // Attendre plus longtemps en cas d'erreur
    }
  }

  return {
    success: currentTotal >= targetOdds,
    totalOdds: currentTotal,
    selectedMatches,
    efficiency: ((currentTotal / targetOdds) * 100).toFixed(1),
    strategy: 'Double Chance'
  };
}

// ===== SCRIPT PRINCIPAL =====
(async () => {
  try {
    const config = await demanderParametres();

    const browser = await puppeteer.launch({
      headless: false,
      slowMo: 100, // Plus lent pour √©viter les d√©tachements
      args: ['--no-sandbox', '--disable-setuid-sandbox', '--start-maximized']
    });

    const page = await browser.newPage();
    
    await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36');
    await page.setViewport({ width: 1366, height: 768 });
    console.log("\nüöÄ Lancement du navigateur...");
    await page.goto("https://www.betpawa.cm/", {
      waitUntil: "networkidle2",
    });

    // √âtape 1: Connexion (si demand√©e)
    if (config.connexionAuto) {
      const connexionReussie = await connexionAutomatique(page);
      if (!connexionReussie) {
        console.log("‚ùå Arr√™t du script - Connexion √©chou√©e");
        await browser.close();
        return;
      }
    } else {
      console.log("‚è≥ Connexion manuelle requise - Connectez-vous puis appuyez sur Entr√©e");
      await poserQuestion("Appuyez sur Entr√©e une fois connect√©...");
    }

    // √âtape 2: Navigation vers Football
    try {
      await page.waitForSelector('div.event-counter span.pointer', { timeout: 5000 });
      await page.click('div.event-counter span.pointer');
      console.log('‚úÖ Clic sur "Tout voir Football"');
      await delay(3000);
    } catch {
      console.log('‚ÑπÔ∏è "Tout voir Football" non trouv√© ou d√©j√† sur la page');
    }

    // √âtape 3: S√©lection des paris selon la strat√©gie
    let result;
    
    if (config.strategie === "1") {
      console.log("üéØ Strat√©gie: Double Chance (Conservateur)");
      console.log("üìã Recherche des meilleurs paris Double Chance...\n");
      
      result = await smartDoubleChanceBetting(
        page, 
        config.coteTarget, 
        config.coteMaxPari, 
        config.modeAleatoire
      );
    } else {
      console.log("‚ö†Ô∏è Seule la strat√©gie Double Chance (Option 1) est impl√©ment√©e dans cette version");
      await arreterApplication(browser, false);
      return;
    }
    
    console.log("\n" + "=".repeat(60));
    console.log("üìä R√âSULTATS DE LA S√âLECTION");
    console.log("=".repeat(60));
    console.log(`üéØ Strat√©gie: ${result.strategy}`);
    console.log(`üéØ Objectif: ${config.coteTarget}x`);
    console.log(`üìà Total atteint: ${result.totalOdds.toFixed(2)}x`);
    console.log(`‚öñÔ∏è Cote max/pari: ${config.coteMaxPari}x`);
    console.log(`‚öΩ Matchs s√©lectionn√©s: ${result.selectedMatches}`);
    console.log(`üéÆ Mode utilis√©: ${config.modeAleatoire ? 'AL√âATOIRE' : 'S√âQUENTIEL'}`);
    console.log(`‚úÖ Succ√®s: ${result.success ? 'OUI üéâ' : 'NON ‚ö†Ô∏è'}`);
    console.log(`üìä Efficacit√©: ${result.efficiency}%`);
    console.log("=".repeat(60));

    // √âtape 4: Placement de mise (si objectif atteint)
    if (result.success && config.placementAuto) {
      console.log("\nüé∞ PLACEMENT AUTOMATIQUE DE LA MISE");
      const miseReussie = await placerMise(page, config.montantMise);
      
      if (miseReussie) {
        console.log("üéâ SUCC√àS COMPLET ! Pari plac√© automatiquement !");
        await arreterApplication(browser, true);
      } else {
        console.log("‚ö†Ô∏è Erreur de placement - V√©rifiez manuellement");
        console.log("üí≠ Le pari pourrait √™tre en attente ou rejet√©");
        await arreterApplication(browser, false);
      }
    } else if (result.success && !config.placementAuto) {
      console.log("\nüí∞ Objectif atteint ! Placement manuel activ√©");
      console.log(`Placez votre mise de ${config.montantMise} manuellement`);
      console.log("‚è≥ Le navigateur reste ouvert pour placement manuel");
      console.log("Appuyez sur Ctrl+C pour fermer quand termin√©");
    } else {
      console.log("\n‚ö†Ô∏è Objectif non atteint, mais paris s√©lectionn√©s.");
      console.log("üí≠ Consid√©rez ajuster les param√®tres pour la prochaine fois.");
      await arreterApplication(browser, false);
    }

  } catch (error) {
    console.error("üö® Erreur critique:", error.message);
    if (browser) await browser.close();
    process.exit(1);
  }
})();