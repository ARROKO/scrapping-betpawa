require("dotenv").config();
const puppeteer = require("puppeteer");
const fs = require("fs");
const path = require("path");
const readline = require("readline");

/**
 * Script int√©gr√© pour Betpawa:
 * - Connexion automatique ou manuelle
 * - Scraping de la liste des matchs
 * - S√©lection des paris (double chance ou victoire simple)
 * - Mode de s√©lection continu ou al√©atoire
 * - Placement des paris
 */

// Fonction pour v√©rifier si un match est dans le coupon de paris
async function checkMatchInBetslip(page, eventId) {
  console.log(`üîç V√©rification si le match ${eventId} est dans le coupon...`);
  
  const isInBetslip = await page.evaluate((eventId) => {
    // Chercher dans le coupon de paris
    const betslipBets = document.querySelectorAll('.betslip-bet');
    
    for (const bet of betslipBets) {
      // Chercher un lien vers cet √©v√©nement dans le coupon
      const matchLink = bet.querySelector(`a[href="/event/${eventId}"]`);
      if (matchLink) {
        console.log(`Match ${eventId} trouv√© dans le coupon:`, matchLink.textContent);
        return true;
      }
    }
    
    console.log(`Match ${eventId} non trouv√© dans le coupon. Nombre de paris dans le coupon: ${betslipBets.length}`);
    return false;
  }, eventId);
  
  return isInBetslip;
}

// URL de la page des matchs
const MATCHES_URL = "https://www.betpawa.cm";

// Configuration pour le navigateur
const BROWSER_CONFIG = {
  headless: false, // Mode non-headless pour voir ce qui se passe
  defaultViewport: { width: 1366, height: 768 },
  args: ["--no-sandbox", "--disable-setuid-sandbox", "--start-maximized"],
  slowMo: 100, // Plus lent pour √©viter les d√©tachements
};

// Configuration du temps d'attente (en ms)
const WAIT_CONFIG = {
  afterScroll: 1500,     // Temps d'attente apr√®s un d√©filement normal
  afterSpecialAction: 2500, // Temps d'attente apr√®s une action sp√©ciale
  initialLoad: 5000,     // Temps d'attente pour le chargement initial
  scrollStep: 80,        // Intervalle entre les √©tapes de d√©filement progressif
  minWait: 800,          // Temps d'attente minimum entre les actions
  maxWait: 2000          // Temps d'attente maximum entre les actions
};

// Fonction pour attendre un d√©lai
async function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

/**
 * Effectue un clic sur un √©l√©ment avec r√©essais
 * @param {Object} page - Instance de la page Puppeteer
 * @param {string} selector - S√©lecteur CSS de l'√©l√©ment √† cliquer
 * @param {number} maxAttempts - Nombre maximal de tentatives
 * @param {number} delayMs - D√©lai entre les tentatives
 * @returns {boolean} - Succ√®s du clic
 */
async function clickWithRetry(page, selector, maxAttempts = 3, delayMs = 1000, checkSelected = false) {
  console.log(`üëÜ Tentative de clic sur: ${selector}`);
  
  for (let attempt = 1; attempt <= maxAttempts; attempt++) {
    try {
      // V√©rifier si l'√©l√©ment existe
      const elementExists = await page.evaluate((sel) => {
        return document.querySelector(sel) !== null;
      }, selector);
      
      if (!elementExists) {
        console.log(`‚ö†Ô∏è Tentative ${attempt}/${maxAttempts}: √âl√©ment non trouv√©`);
        await delay(delayMs);
        continue;
      }
      
      // V√©rifier si l'√©l√©ment est visible
      const isVisible = await page.evaluate((sel) => {
        const el = document.querySelector(sel);
        if (!el) return false;
        
        const style = window.getComputedStyle(el);
        return style.display !== 'none' && style.visibility !== 'hidden' && style.opacity !== '0';
      }, selector);
      
      if (!isVisible) {
        console.log(`‚ö†Ô∏è Tentative ${attempt}/${maxAttempts}: √âl√©ment non visible`);
        await delay(delayMs);
        continue;
      }
      
      // Faire d√©filer jusqu'√† l'√©l√©ment
      await page.evaluate((sel) => {
        const element = document.querySelector(sel);
        if (element) {
          element.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
      }, selector);
      
      await delay(500); // Attendre que le d√©filement soit termin√©
      
      // Cliquer sur l'√©l√©ment
      await page.click(selector);
      console.log(`üëâ Clic effectu√© sur ${selector} (tentative ${attempt}/${maxAttempts})`);
      
      // Si on doit v√©rifier que l'√©l√©ment est s√©lectionn√©
      if (checkSelected) {
        await delay(1000); // Attendre que la s√©lection soit prise en compte
        
        // V√©rifier que l'option est s√©lectionn√©e
        const isSelected = await page.evaluate((sel) => {
          const element = document.querySelector(sel);
          if (!element) return false;
          
          // V√©rifier plusieurs classes possibles qui indiquent une s√©lection
          return element.classList.contains('selected') || 
                 element.classList.contains('active') || 
                 element.classList.contains('event-bet--selected') ||
                 element.hasAttribute('data-selected') ||
                 element.getAttribute('aria-selected') === 'true';
        }, selector);
        
        if (isSelected) {
          console.log(`‚úÖ Option s√©lectionn√©e avec succ√®s! (tentative ${attempt}/${maxAttempts})`);
          return true;
        } else {
          console.log(`‚ö†Ô∏è L'option n'est pas s√©lectionn√©e apr√®s le clic (tentative ${attempt}/${maxAttempts})`);
          if (attempt < maxAttempts) {
            await delay(delayMs);
            continue;
          }
        }
      } else {
        // Si on ne v√©rifie pas la s√©lection, on consid√®re que c'est un succ√®s
        console.log(`‚úÖ Clic r√©ussi sur ${selector}`);
        return true;
      }
    } catch (error) {
      console.log(`‚ö†Ô∏è Tentative ${attempt}/${maxAttempts} √©chou√©e: ${error.message}`);
      
      if (attempt === maxAttempts) {
        console.error(`‚ùå √âchec apr√®s ${maxAttempts} tentatives de clic sur ${selector}`);
        return false;
      }
      
      await delay(delayMs);
    }
  }
  
  return false;
}

// Interface pour poser les questions
function poserQuestion(question) {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });
  
  return new Promise((resolve) => {
    rl.question(question, (reponse) => {
      rl.close();
      resolve(reponse.trim());
    });
  });
}

/**
 * Fonction pour demander les param√®tres de configuration
 */
async function demanderParametres() {
  console.log("=".repeat(60));
  console.log("üéÆ CONFIGURATION DU BOT BETPAWA");
  console.log("=".repeat(60));
  
  // 1. Connexion automatique
  console.log("\nüîê Connexion automatique :");
  console.log("OUI : Connexion automatique avec .env");
  console.log("NON : Connexion manuelle");
  
  let connexionAuto;
  do {
    const input = await poserQuestion("Utiliser la connexion automatique ? (oui/non) : ");
    if (['oui', 'o', 'yes', 'y', '1'].includes(input.toLowerCase())) {
      connexionAuto = true;
    } else if (['non', 'n', 'no', '0'].includes(input.toLowerCase())) {
      connexionAuto = false;
    } else {
      console.log("‚ùå Veuillez r√©pondre par 'oui' ou 'non'");
      connexionAuto = null;
    }
  } while (connexionAuto === null);

  // 2. Choix de la strat√©gie
  console.log("\nüìã Choisissez une strat√©gie de paris :");
  console.log("1. Double chance (Conservateur) ‚≠ê RECOMMAND√â");
  console.log("2. Juste victoire (√âquilibr√©)");
  
  let choixStrategie;
  do {
    choixStrategie = await poserQuestion("Votre choix (1-2) : ");
  } while (!['1', '2'].includes(choixStrategie));

  // 3. Cote totale cible
  console.log("\nüéØ Objectif de cote totale :");
  console.log("Exemples : 10 (facile), 50 (moyen), 100 (difficile), 500 (expert)");
  
  let coteTarget;
  do {
    const input = await poserQuestion("Cote totale √† atteindre (minimum 5) : ");
    coteTarget = parseFloat(input);
    if (isNaN(coteTarget) || coteTarget < 5) {
      console.log("‚ùå Veuillez entrer un nombre valide ‚â• 5");
      coteTarget = null;
    }
  } while (!coteTarget);

  // 4. Cote maximale par pari
  console.log("\n‚öñÔ∏è Limite de cote par pari :");
  console.log("Exemples : 1.5 (tr√®s s√ªr), 2.0 (s√ªr), 2.5 (√©quilibr√©), 3.0 (risqu√©)");
  
  let coteMaxPari;
  do {
    const input = await poserQuestion("Cote maximale par pari (1.1 - 5.0) : ");
    coteMaxPari = parseFloat(input);
    if (isNaN(coteMaxPari) || coteMaxPari < 1.1 || coteMaxPari > 5.0) {
      console.log("‚ùå Veuillez entrer un nombre entre 1.1 et 5.0");
      coteMaxPari = null;
    }
  } while (!coteMaxPari);

  // 5. Mode al√©atoire
  console.log("\nüé≤ Mode de s√©lection :");
  console.log("OUI : S√©lection intelligente et al√©atoire (recommand√©)");
  console.log("NON : S√©lection s√©quentielle classique");
  
  let modeAleatoire;
  do {
    const input = await poserQuestion("Utiliser le mode al√©atoire ? (oui/non) : ");
    if (['oui', 'o', 'yes', 'y', '1'].includes(input.toLowerCase())) {
      modeAleatoire = true;
    } else if (['non', 'n', 'no', '0'].includes(input.toLowerCase())) {
      modeAleatoire = false;
    } else {
      console.log("‚ùå Veuillez r√©pondre par 'oui' ou 'non'");
      modeAleatoire = null;
    }
  } while (modeAleatoire === null);

  // 6. Montant de mise
  let montantMise;
  do {
    const input = await poserQuestion("\nüí∞ Montant de la mise (minimum 1) : ");
    montantMise = parseFloat(input);
    if (isNaN(montantMise) || montantMise < 1) {
      console.log("‚ùå Veuillez entrer un montant valide ‚â• 1");
      montantMise = null;
    }
  } while (!montantMise);

  // 7. Placement automatique
  console.log("\nüé∞ Placement de mise :");
  console.log("OUI : Placement automatique d√®s que l'objectif est atteint");
  console.log("NON : Arr√™t pour placement manuel");
  
  let placementAuto;
  do {
    const input = await poserQuestion("Placement automatique ? (oui/non) : ");
    if (['oui', 'o', 'yes', 'y', '1'].includes(input.toLowerCase())) {
      placementAuto = true;
    } else if (['non', 'n', 'no', '0'].includes(input.toLowerCase())) {
      placementAuto = false;
    } else {
      console.log("‚ùå Veuillez r√©pondre par 'oui' ou 'non'");
      placementAuto = null;
    }
  } while (placementAuto === null);

  // 8. Confirmation
  console.log("\n" + "=".repeat(50));
  console.log("üìã R√âCAPITULATIF DE LA CONFIGURATION");
  console.log("=".repeat(50));
  console.log(`üîê Connexion auto: ${connexionAuto ? 'OUI' : 'NON'}`);
  console.log(`üéÆ Strat√©gie: Option ${choixStrategie} (${choixStrategie === '1' ? 'Double chance' : 'Juste victoire'})`);
  console.log(`üéØ Cote cible: ${coteTarget}x`);
  console.log(`‚öñÔ∏è Cote max/pari: ${coteMaxPari}x`);
  console.log(`üé≤ Mode al√©atoire: ${modeAleatoire ? 'OUI' : 'NON'}`);
  console.log(`üí∞ Mise: ${montantMise}`);
  console.log(`üé∞ Placement auto: ${placementAuto ? 'OUI' : 'NON'}`);
  console.log("=".repeat(50));
  
  const confirmation = await poserQuestion("\n‚úÖ Confirmer ces param√®tres ? (oui/non) : ");
  
  if (!['oui', 'o', 'yes', 'y', '1'].includes(confirmation.toLowerCase())) {
    console.log("‚ùå Configuration annul√©e.");
    process.exit(0);
  }

  return {
    connexionAuto,
    strategie: choixStrategie,
    coteTarget: coteTarget,
    coteMaxPari: coteMaxPari,
    modeAleatoire: modeAleatoire,
    montantMise: montantMise,
    placementAuto: placementAuto
  };
}

/**
 * Fonction de connexion automatique
 */
async function connexionAutomatique(page) {
  try {
    console.log("üîê D√©but de la connexion automatique...");

    // V√©rifier les variables d'environnement
    if (!process.env.COUNTRY_CODE || !process.env.PHONE_NUMBER || !process.env.PASSWORD) {
      console.log("‚ùå Variables d'environnement manquantes");
      console.log("Ajoutez dans votre .env :");
      console.log("COUNTRY_CODE=+237");
      console.log("PHONE_NUMBER=votre_numero");
      console.log("PASSWORD=votre_mot_de_passe");
      return false;
    }

    // Cliquer sur le bouton Connexion
    await page.waitForSelector('a.button.button-accent[href="/login"]', { timeout: 10000 });
    await page.click('a.button.button-accent[href="/login"]');
    console.log("‚úÖ Clic sur le bouton connexion");

    // Remplir le code pays
    await page.waitForSelector(".country-code", { timeout: 5000 });
    await page.type(".country-code", process.env.COUNTRY_CODE);
    console.log("‚úÖ Code pays saisi");

    // Remplir le num√©ro de t√©l√©phone
    await page.waitForSelector("#login-form-phoneNumber", { timeout: 5000 });
    await page.type("#login-form-phoneNumber", process.env.PHONE_NUMBER);
    console.log("‚úÖ Num√©ro de t√©l√©phone saisi");

    // Remplir le mot de passe
    await page.waitForSelector("#login-form-password-input", { timeout: 5000 });
    await page.type("#login-form-password-input", process.env.PASSWORD);
    console.log("‚úÖ Mot de passe saisi");

    // Cliquer sur le bouton de connexion
    await page.click('input[data-test-id="logInButton"]');
    console.log("‚úÖ Clic sur le bouton de connexion");
    
    // Attendre un peu pour laisser la page se charger
    await delay(3000);
    
    // Attendre la connexion avec plusieurs s√©lecteurs possibles
    await page.waitForFunction(() => {
      // V√©rifier plusieurs s√©lecteurs possibles pour le solde
      return document.querySelector('span.button.balance') !== null || 
             document.querySelector('.balance-amount') !== null || 
             document.querySelector('.header-buttons-authenticated .button.balance') !== null;
    }, { timeout: 20000 }); // Augmenter le timeout pour donner plus de temps
    
    // Attendre un peu plus pour s'assurer que tout est charg√©
    await delay(1000);
    console.log("‚úÖ Connexion r√©ussie!");

    // R√©cup√©rer et afficher le solde
    const soldeNum = await getSolde(page);
    console.log("üí∞ Solde actuel:", soldeNum);

    if (soldeNum <= 0) {
      console.log("‚ùå Solde insuffisant:", soldeNum);
      return false;
    }

    console.log("‚úÖ Solde suffisant pour continuer");
    return true;

  } catch (error) {
    console.error("‚ùå Erreur de connexion:", error.message);
    return false;
  }
}

/**
 * R√©cup√®re le solde du compte
 */
async function getSolde(page) {
  try {
    // Attendre que le solde soit visible avec plusieurs s√©lecteurs possibles
    await page.waitForFunction(() => {
      // V√©rifier plusieurs s√©lecteurs possibles pour le solde
      return document.querySelector('span.button.balance') !== null || 
             document.querySelector('.balance-amount') !== null || 
             document.querySelector('.header-buttons-authenticated .button.balance') !== null;
    }, { timeout: 15000 });
    
    // Prendre une capture d'√©cran pour d√©bogage (optionnel)
    // await page.screenshot({ path: 'balance-debug.png' });
    
    // R√©cup√©rer le solde avec plusieurs s√©lecteurs possibles
    const solde = await page.evaluate(() => {
      // Essayer plusieurs s√©lecteurs dans l'ordre de priorit√©
      const selectors = [
        'span.button.balance',
        '.header-buttons-authenticated .button.balance',
        '.balance-amount'
      ];
      
      let balanceElement = null;
      for (const selector of selectors) {
        balanceElement = document.querySelector(selector);
        if (balanceElement) break;
      }
      
      if (balanceElement) {
        const balanceText = balanceElement.textContent.trim();
        console.log('Texte du solde brut:', balanceText); // Debug
        
        // Extraire les chiffres du texte (format: "FCFA 490.00" ou similaire)
        const match = balanceText.match(/[\d,.]+/);
        if (match) {
          // Convertir en nombre (remplacer la virgule par un point si n√©cessaire)
          const valueStr = match[0].replace(/,/g, '.');
          const value = parseFloat(valueStr);
          console.log('Valeur extraite:', value);
          return value;
        }
      }
      return 0;
    });
    
    console.log(`üí∞ Solde actuel: ${solde}`);
    return solde;
  } catch (error) {
    console.warn('‚ö†Ô∏è Impossible de r√©cup√©rer le solde:', error.message);
    return 0;
  }
}

/**
 * Fonction pour cliquer sur le bouton "Tout voir Football"
 */
async function clickToutVoirFootball(page) {
  console.log("üîç Recherche du bouton 'Tout voir Football'...");
  
  try {
    // Attendre plus longtemps pour le chargement complet de la page
    await delay(WAIT_CONFIG.initialLoad * 1.5);
    
    // M√©thode 1: Recherche par s√©lecteur sp√©cifique et texte
    console.log("M√©thode 1: Recherche par s√©lecteur sp√©cifique et texte");
    let buttonFound = false;
    
    try {
      // Attendre que le bouton "Tout voir Football" soit disponible avec un timeout plus long
      await page.waitForFunction(
        () => {
          const elements = Array.from(document.querySelectorAll('.event-counter span.pointer, span.pointer, a.pointer, [role="button"]'));
          return elements.some(el => el.textContent && el.textContent.includes('Tout voir Football'));
        },
        { timeout: 8000 }
      );
      
      // Cliquer sur le bouton "Tout voir Football"
      buttonFound = await page.evaluate(() => {
        const elements = Array.from(document.querySelectorAll('.event-counter span.pointer, span.pointer, a.pointer, [role="button"]'));
        const footballButton = elements.find(el => el.textContent && el.textContent.includes('Tout voir Football'));
        if (footballButton) {
          console.log('Bouton "Tout voir Football" trouv√©');
          // Scroll vers le bouton avant de cliquer
          footballButton.scrollIntoView({ behavior: 'smooth', block: 'center' });
          // Attendre un court instant avant de cliquer
          setTimeout(() => footballButton.click(), 500);
          return true;
        }
        return false;
      });
      
      // Attendre apr√®s le clic pour s'assurer que l'action est trait√©e
      await delay(1000);
    } catch (e) {
      console.log(`M√©thode 1 a √©chou√©: ${e.message}`);
    }
    
    // M√©thode 2: Recherche par attribut data-v (plus g√©n√©rique)
    if (!buttonFound) {
      console.log("M√©thode 2: Recherche par attribut data-v");
      try {
        buttonFound = await page.evaluate(() => {
          // Rechercher tous les √©l√©ments avec n'importe quel attribut data-v
          const elements = Array.from(document.querySelectorAll('[data-v-*]'));
          const footballButton = elements.find(el => {
            return el.textContent && el.textContent.includes('Tout voir Football');
          });
          
          if (footballButton) {
            console.log('Bouton "Tout voir Football" trouv√© via data-v');
            footballButton.scrollIntoView({ behavior: 'smooth', block: 'center' });
            setTimeout(() => footballButton.click(), 500);
            return true;
          }
          return false;
        });
        
        // Attendre apr√®s le clic
        await delay(1000);
      } catch (e) {
        console.log(`M√©thode 2 a √©chou√©: ${e.message}`);
      }
    }
    
    // M√©thode 3: Recherche par XPath plus exhaustive
    if (!buttonFound) {
      console.log("M√©thode 3: Recherche par XPath");
      try {
        // XPath plus complet pour trouver le bouton
        const xpaths = [
          "//span[contains(text(), 'Tout voir Football')]",
          "//a[contains(text(), 'Tout voir Football')]",
          "//div[contains(text(), 'Tout voir Football')]",
          "//button[contains(text(), 'Tout voir Football')]",
          "//*/text()[contains(., 'Tout voir Football')]/parent::*"
        ];
        
        for (const xpath of xpaths) {
          const [button] = await page.$x(xpath);
          if (button) {
            // Scroll vers le bouton avant de cliquer
            await page.evaluate(el => {
              el.scrollIntoView({ behavior: 'smooth', block: 'center' });
            }, button);
            
            await delay(500);
            await button.click();
            buttonFound = true;
            console.log('Bouton "Tout voir Football" trouv√© via XPath');
            break;
          }
        }
      } catch (e) {
        console.log(`M√©thode 3 a √©chou√©: ${e.message}`);
      }
    }
    
    // M√©thode 4: Recherche par simulation de clic sur tous les √©l√©ments cliquables
    if (!buttonFound) {
      console.log("M√©thode 4: Recherche par simulation de clic sur √©l√©ments cliquables");
      try {
        buttonFound = await page.evaluate(() => {
          // Chercher tous les √©l√©ments cliquables qui pourraient contenir le texte
          const clickableElements = Array.from(document.querySelectorAll('a, button, [role="button"], .clickable, .pointer'));
          
          // Filtrer pour trouver des √©l√©ments qui pourraient √™tre li√©s au football
          const potentialButtons = clickableElements.filter(el => {
            const text = el.textContent?.toLowerCase() || '';
            return text.includes('football') || text.includes('sport') || text.includes('tout voir');
          });
          
          // Cliquer sur chaque √©l√©ment potentiel
          if (potentialButtons.length > 0) {
            console.log(`Trouv√© ${potentialButtons.length} boutons potentiels li√©s au football`);
            potentialButtons[0].scrollIntoView({ behavior: 'smooth', block: 'center' });
            setTimeout(() => potentialButtons[0].click(), 500);
            return true;
          }
          return false;
        });
      } catch (e) {
        console.log(`M√©thode 4 a √©chou√©: ${e.message}`);
      }
    }
    
    return buttonFound;
  } catch (error) {
    console.log(`‚ö†Ô∏è Impossible de trouver ou cliquer sur 'Tout voir Football': ${error.message}`);
    return false;
  }
}

/**
 * Fonction pour d√©filer de mani√®re progressive et simuler un comportement humain
 */
async function scrollProgressively(page) {
  await page.evaluate((config) => {
    return new Promise((resolve) => {
      let totalHeight = 0;
      // Distance variable pour simuler un comportement humain
      const getRandomDistance = () => Math.floor(Math.random() * 200) + 200; // Entre 200 et 400px
      const getRandomDelay = () => Math.floor(Math.random() * (config.maxWait - config.minWait)) + config.minWait;
      
      const timer = setInterval(() => {
        const scrollHeight = document.body.scrollHeight;
        const distance = getRandomDistance();
        
        // Simuler un mouvement de souris al√©atoire pour para√Ætre plus humain
        const mouseEvent = new MouseEvent('mousemove', {
          bubbles: true,
          clientX: Math.random() * window.innerWidth,
          clientY: Math.random() * window.innerHeight
        });
        document.dispatchEvent(mouseEvent);
        
        // D√©filement avec une vitesse variable
        window.scrollBy({
          top: distance,
          behavior: 'smooth'
        });
        
        totalHeight += distance;
        
        if (totalHeight >= scrollHeight) {
          clearInterval(timer);
          resolve();
        }
      }, config.scrollStep);
    });
  }, WAIT_CONFIG);
}

/**
 * Ex√©cute une technique de d√©filement sp√©cifique
 * @param {Object} page - Instance de la page Puppeteer
 * @param {number} techniqueNumber - Num√©ro de la technique √† ex√©cuter (0-3)
 * @param {string} containerSelector - S√©lecteur du conteneur principal (optionnel)
 */
async function executeTechnique(page, techniqueNumber, containerSelector = null) {
  console.log(`üîÑ Ex√©cution de la technique ${techniqueNumber + 1}/4...`);
  
  switch (techniqueNumber) {
    case 0:
      // Technique 1: D√©filement rapide jusqu'au bas avec rebond
      await page.evaluate(() => {
        // D√©filement au bas de la page
        window.scrollTo(0, document.body.scrollHeight);
        
        // Apr√®s un court d√©lai, remonter un peu puis redescendre (effet rebond)
        setTimeout(() => {
          window.scrollTo(0, document.body.scrollHeight * 0.8);
          setTimeout(() => window.scrollTo(0, document.body.scrollHeight), 200);
        }, 300);
      });
      break;
      
    case 1:
      // Technique 2: D√©filement par √©tapes avec pauses et interactions
      await page.evaluate(() => {
        const height = document.body.scrollHeight;
        
        // Simuler des clics al√©atoires pendant le d√©filement
        const simulateRandomClicks = () => {
          // Trouver des √©l√©ments cliquables mais non critiques (pas les liens principaux)
          const nonCriticalElements = Array.from(document.querySelectorAll('.event-odds, .event-counter, .game-event-header'));
          if (nonCriticalElements.length > 0) {
            const randomElement = nonCriticalElements[Math.floor(Math.random() * nonCriticalElements.length)];
            randomElement.dispatchEvent(new MouseEvent('mouseover', { bubbles: true }));
          }
        };
        
        // D√©filement par √©tapes avec interactions
        window.scrollTo(0, height * 0.3);
        setTimeout(() => simulateRandomClicks(), 150);
        setTimeout(() => window.scrollTo(0, height * 0.6), 300);
        setTimeout(() => simulateRandomClicks(), 450);
        setTimeout(() => window.scrollTo(0, height), 600);
      });
      break;
      
    case 2:
      // Technique 3: Cibler et interagir avec les derniers matchs
      await page.evaluate(() => {
        const matches = document.querySelectorAll('.game-events-container');
        if (matches.length > 0) {
          // Cibler les 5 derniers matchs
          const startIndex = Math.max(0, matches.length - 5);
          
          // Faire d√©filer vers le dernier match avec un effet de ralentissement
          const lastMatch = matches[matches.length - 1];
          lastMatch.scrollIntoView({ behavior: 'smooth', block: 'end' });
          
          // Simuler des interactions avec les derniers matchs
          setTimeout(() => {
            for (let i = startIndex; i < matches.length; i++) {
              const match = matches[i];
              const delay = (i - startIndex) * 100;
              
              setTimeout(() => {
                // Simuler un survol et un clic sur les cotes
                const odds = match.querySelectorAll('.event-odds span');
                if (odds.length > 0) {
                  const randomOdd = odds[Math.floor(Math.random() * odds.length)];
                  randomOdd.dispatchEvent(new MouseEvent('mouseover', { bubbles: true }));
                  // Ne pas vraiment cliquer pour √©viter de naviguer ailleurs
                }
              }, delay);
            }
          }, 200);
        }
      });
      break;
      
    case 3:
      // Technique 4: Interactions avanc√©es avec le conteneur principal et d√©filement dynamique
      if (containerSelector) {
        await page.evaluate((selector) => {
          const container = document.querySelector(selector);
          if (container) {
            // S√©quence d'interactions plus complexe
            const simulateHumanInteraction = () => {
              // Simuler des mouvements de souris
              for (let i = 0; i < 3; i++) {
                setTimeout(() => {
                  container.dispatchEvent(new MouseEvent('mousemove', { 
                    bubbles: true,
                    clientX: Math.random() * window.innerWidth,
                    clientY: Math.random() * window.innerHeight
                  }));
                }, i * 100);
              }
              
              // Simuler un clic et un d√©filement
              container.dispatchEvent(new MouseEvent('mousedown', { bubbles: true }));
              container.dispatchEvent(new MouseEvent('mouseup', { bubbles: true }));
              
              // Faire d√©filer avec une acc√©l√©ration progressive
              const startTime = Date.now();
              const duration = 800;
              const initialPosition = container.scrollTop || window.scrollY;
              const targetPosition = container.scrollHeight || document.body.scrollHeight;
              
              const scrollStep = () => {
                const elapsed = Date.now() - startTime;
                const progress = Math.min(elapsed / duration, 1);
                // Fonction d'acc√©l√©ration
                const easeInOutCubic = progress < 0.5 ? 4 * progress**3 : 1 - Math.pow(-2 * progress + 2, 3) / 2;
                
                const currentPosition = initialPosition + (targetPosition - initialPosition) * easeInOutCubic;
                
                if (typeof container.scrollTo === 'function') {
                  container.scrollTo(0, currentPosition);
                } else {
                  window.scrollTo(0, currentPosition);
                }
                
                if (progress < 1) {
                  requestAnimationFrame(scrollStep);
                }
              };
              
              requestAnimationFrame(scrollStep);
            };
            
            simulateHumanInteraction();
          }
        }, containerSelector);
      } else {
        // Technique alternative si le conteneur n'est pas trouv√©
        await page.evaluate(() => {
          // Simuler un d√©filement avec acc√©l√©ration/d√©c√©l√©ration
          const scrollHeight = document.body.scrollHeight;
          const duration = 1000;
          const startTime = Date.now();
          const startPosition = window.scrollY;
          
          const scrollStep = () => {
            const elapsed = Date.now() - startTime;
            const progress = Math.min(elapsed / duration, 1);
            // Fonction d'acc√©l√©ration/d√©c√©l√©ration
            const easeInOutQuad = progress < 0.5 ? 2 * progress**2 : 1 - Math.pow(-2 * progress + 2, 2) / 2;
            
            window.scrollTo(0, startPosition + (scrollHeight - startPosition) * easeInOutQuad);
            
            if (progress < 1) {
              requestAnimationFrame(scrollStep);
            }
          };
          
          requestAnimationFrame(scrollStep);
        });
      }
      break;
  }
}

/**
 * D√©file la page pour charger tous les matchs disponibles
 */
async function scrollToLoadAllMatches(page) {
  console.log("üîç Chargement de tous les matchs disponibles...");
  
  // Conteneur principal des matchs
  const mainContainerSelector = '.game-events-container';
  
  // Nombre maximum de tentatives de d√©filement
  const MAX_SCROLL_ATTEMPTS = 15;
  // Nombre maximum de tentatives sans changement de hauteur
  const MAX_NO_CHANGE_ATTEMPTS = 5;
  
  let previousHeight = 0;
  let noChangeCount = 0;
  let scrollAttempts = 0;
  let matchCount = 0;
  let previousMatchCount = 0;
  
  while (scrollAttempts < MAX_SCROLL_ATTEMPTS && noChangeCount < MAX_NO_CHANGE_ATTEMPTS) {
    // Obtenir la hauteur actuelle de la page
    const currentHeight = await page.evaluate(() => document.body.scrollHeight);
    
    // Compter le nombre de matchs actuellement charg√©s
    matchCount = await page.evaluate((selector) => {
      return document.querySelectorAll(selector).length;
    }, mainContainerSelector);
    
    console.log(`üìä Tentative ${scrollAttempts + 1}/${MAX_SCROLL_ATTEMPTS}: ${matchCount} matchs charg√©s`);
    
    // V√©rifier si la hauteur a chang√© ou si de nouveaux matchs ont √©t√© charg√©s
    if (currentHeight === previousHeight && matchCount === previousMatchCount) {
      noChangeCount++;
      console.log(`‚ö†Ô∏è Aucun changement d√©tect√© (${noChangeCount}/${MAX_NO_CHANGE_ATTEMPTS})`);
    } else {
      noChangeCount = 0;
      console.log(`‚úÖ Nouveaux contenus d√©tect√©s: ${matchCount - previousMatchCount} nouveaux matchs`);
    }
    
    // Utiliser une technique de d√©filement diff√©rente √† chaque it√©ration pour √©viter la d√©tection
    const techniqueNumber = scrollAttempts % 4;
    await executeTechnique(page, techniqueNumber, mainContainerSelector);
    
    // Attendre que le contenu se charge
    await delay(WAIT_CONFIG.afterScroll);
    
    // Si nous avons fait plusieurs tentatives sans changement, essayer un d√©filement progressif
    if (noChangeCount >= 2 && noChangeCount < MAX_NO_CHANGE_ATTEMPTS - 1) {
      console.log("üîÑ Essai de d√©filement progressif...");
      await scrollProgressively(page);
      await delay(WAIT_CONFIG.afterSpecialAction);
    }
    
    // Mettre √† jour les valeurs pr√©c√©dentes
    previousHeight = currentHeight;
    previousMatchCount = matchCount;
    scrollAttempts++;
  }
  
  console.log(`üåü Chargement termin√©! ${matchCount} matchs charg√©s au total.`);
  return matchCount;
}

/**
 * Extrait les donn√©es des matchs de la page
 */
async function extractMatchData(page) {
  console.log("üìä Extraction des donn√©es des matchs...");
  
  const matchData = await page.evaluate(() => {
    const matches = [];
    const matchContainers = document.querySelectorAll('.game-events-container');
    
    matchContainers.forEach((container) => {
      try {
        // Extraire les informations de base du match
        const competitionElement = container.querySelector('.competition-name');
        const competition = competitionElement ? competitionElement.textContent.trim() : 'Comp√©tition inconnue';
        
        const timeElement = container.querySelector('.event-time');
        const time = timeElement ? timeElement.textContent.trim() : 'Heure inconnue';
        
        // Extraire les √©quipes
        const teamElements = container.querySelectorAll('.event-name');
        const homeTeam = teamElements[0] ? teamElements[0].textContent.trim() : '√âquipe domicile inconnue';
        const awayTeam = teamElements[1] ? teamElements[1].textContent.trim() : '√âquipe ext√©rieure inconnue';
        
        // Extraire les cotes
        const oddElements = container.querySelectorAll('.event-odds span');
        const odds = [];
        oddElements.forEach((oddElement) => {
          const oddValue = parseFloat(oddElement.textContent.trim());
          if (!isNaN(oddValue)) {
            odds.push(oddValue);
          }
        });
        
        // Extraire l'URL du match
        let matchUrl = '';
        const linkElement = container.querySelector('a');
        if (linkElement && linkElement.href) {
          matchUrl = linkElement.href;
        }
        
        // Cr√©er l'objet match avec toutes les informations
        const match = {
          competition,
          time,
          homeTeam,
          awayTeam,
          odds,
          url: matchUrl,
          // Ajouter des champs pour les paris
          homeWinOdd: odds[0] || null,
          drawOdd: odds[1] || null,
          awayWinOdd: odds[2] || null,
          doubleChanceOdds: {
            homeOrDraw: null,  // 1X
            drawOrAway: null,  // X2
            homeOrAway: null   // 12
          }
        };
        
        // Calculer les cotes Double Chance si toutes les cotes principales sont disponibles
        if (match.homeWinOdd && match.drawOdd && match.awayWinOdd) {
          // Formule pour calculer les cotes Double Chance
          // 1X = (a * b) / (a + b) o√π a = cote 1, b = cote X
          match.doubleChanceOdds.homeOrDraw = parseFloat(((match.homeWinOdd * match.drawOdd) / (match.homeWinOdd + match.drawOdd)).toFixed(2));
          match.doubleChanceOdds.drawOrAway = parseFloat(((match.drawOdd * match.awayWinOdd) / (match.drawOdd + match.awayWinOdd)).toFixed(2));
          match.doubleChanceOdds.homeOrAway = parseFloat(((match.homeWinOdd * match.awayWinOdd) / (match.homeWinOdd + match.awayWinOdd)).toFixed(2));
        }
        
        matches.push(match);
      } catch (error) {
        console.error('Erreur lors de l\'extraction d\'un match:', error);
      }
    });
    
    return matches;
  });
  
  console.log(`‚úÖ ${matchData.length} matchs extraits avec succ√®s`);
  return matchData;
}

/**
 * S√©lectionne les matchs pour parier en fonction des crit√®res
 * @param {Array} matches - Liste des matchs disponibles
 * @param {Object} config - Configuration des paris
 * @returns {Array} - Liste des matchs s√©lectionn√©s pour parier
 */
function selectMatchesToBet(matches, config) {
  console.log("üé∞ S√©lection des matchs pour paris...");
  
  // Filtrer les matchs avec des cotes valides selon la strat√©gie
  let validMatches = matches.filter(match => {
    if (config.strategie === '1') { // Double chance
      // V√©rifier que les cotes Double Chance sont disponibles
      return match.doubleChanceOdds.homeOrDraw !== null && 
             match.doubleChanceOdds.drawOrAway !== null && 
             match.doubleChanceOdds.homeOrAway !== null;
    } else { // Victoire simple
      // V√©rifier que les cotes de victoire sont disponibles
      return match.homeWinOdd !== null && match.awayWinOdd !== null;
    }
  });
  
  // Filtrer les matchs selon la cote maximale par pari
  validMatches = validMatches.filter(match => {
    if (config.strategie === '1') { // Double chance
      // Prendre la cote la plus basse des options Double Chance
      const lowestDoubleChanceOdd = Math.min(
        match.doubleChanceOdds.homeOrDraw,
        match.doubleChanceOdds.drawOrAway,
        match.doubleChanceOdds.homeOrAway
      );
      return lowestDoubleChanceOdd <= config.coteMaxPari;
    } else { // Victoire simple
      // Prendre la cote la plus basse entre victoire domicile et ext√©rieur
      const lowestWinOdd = Math.min(match.homeWinOdd, match.awayWinOdd);
      return lowestWinOdd <= config.coteMaxPari;
    }
  });
  
  console.log(`‚úÖ ${validMatches.length} matchs valides pour paris trouv√©s`);
  
  // Si mode al√©atoire, m√©langer les matchs
  if (config.modeAleatoire) {
    console.log("üé≤ Mode al√©atoire activ√©, m√©lange des matchs...");
    validMatches = shuffleArray(validMatches);
  } else {
    console.log("üî∞ Mode s√©quentiel activ√©, tri des matchs par cote...");
    // Trier par cote croissante (plus s√ªr d'abord)
    validMatches.sort((a, b) => {
      let oddA, oddB;
      
      if (config.strategie === '1') { // Double chance
        oddA = Math.min(
          a.doubleChanceOdds.homeOrDraw,
          a.doubleChanceOdds.drawOrAway,
          a.doubleChanceOdds.homeOrAway
        );
        oddB = Math.min(
          b.doubleChanceOdds.homeOrDraw,
          b.doubleChanceOdds.drawOrAway,
          b.doubleChanceOdds.homeOrAway
        );
      } else { // Victoire simple
        oddA = Math.min(a.homeWinOdd, a.awayWinOdd);
        oddB = Math.min(b.homeWinOdd, b.awayWinOdd);
      }
      
      return oddA - oddB;
    });
  }
  
  return validMatches;
}

/**
 * M√©lange un tableau (algorithme de Fisher-Yates)
 */
function shuffleArray(array) {
  const newArray = [...array];
  for (let i = newArray.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [newArray[i], newArray[j]] = [newArray[j], newArray[i]];
  }
  return newArray;
}

/**
 * S√©lectionne la meilleure option de double chance pour un match
 * @param {Object} page - Instance de la page Puppeteer
 * @param {Object} config - Configuration des paris avec c√¥te maximale
 * @returns {Object} - R√©sultat de la s√©lection {success, option, cote}
 */
async function selectDoubleChance(page, config) {
  console.log(`üéØ Recherche de l'option Double Chance...`);
  
  try {
    // V√©rifier si la page est bien charg√©e
    console.log(`üîç V√©rification de l'√©tat de la page avant recherche Double Chance...`);
    const pageUrl = await page.url();
    console.log(`üåê URL actuelle: ${pageUrl}`);
    
    // Attendre que la section Double Chance soit disponible
    console.log(`‚è≥ Attente de la section Double Chance [data-test-id="market-4693"]...`);
    await page.waitForSelector('[data-test-id="market-4693"]', { timeout: 15000 });
    console.log("‚úÖ Section Double Chance trouv√©e!");
    
    // Prendre une capture d'√©cran pour d√©bogage
    const timestamp = new Date().toISOString().replace(/:/g, '-');
    await page.screenshot({ path: `match-options-${timestamp}.png`, fullPage: false });
    console.log(`üì∑ Capture d'√©cran des options enregistr√©e: match-options-${timestamp}.png`);
    
    // V√©rifier la pr√©sence des s√©lecteurs sp√©cifiques avant d'extraire les donn√©es
    const selectorsPresent = await page.evaluate(() => {
      const selectors = [
        '[data-test-id="Odd-4693-4694"]',
        '[data-test-id="Odd-4693-4695"]',
        '[data-test-id="Odd-4693-4696"]'
      ];
      
      const results = {};
      selectors.forEach(selector => {
        const element = document.querySelector(selector);
        results[selector] = {
          exists: !!element,
          hasSelection: element && !!element.querySelector('.event-selection'),
          hasOdds: element && !!element.querySelector('.event-odds span:not(.svg-icon)')
        };
      });
      
      return results;
    });
    
    console.log(`üìä √âtat des s√©lecteurs Double Chance:`);
    console.log(`- 1X [data-test-id="Odd-4693-4694"]: ${JSON.stringify(selectorsPresent['[data-test-id="Odd-4693-4694"]'])}`);
    console.log(`- X2 [data-test-id="Odd-4693-4695"]: ${JSON.stringify(selectorsPresent['[data-test-id="Odd-4693-4695"]'])}`);
    console.log(`- 12 [data-test-id="Odd-4693-4696"]: ${JSON.stringify(selectorsPresent['[data-test-id="Odd-4693-4696"]'])}`);
    
    // R√©cup√©rer les options disponibles avec les s√©lecteurs sp√©cifiques
    const doubleChanceOptions = await page.evaluate(() => {
      const options = [];
      
      // 1X (Victoire √† domicile ou match nul)
      const bet1X = document.querySelector('[data-test-id="Odd-4693-4694"]');
      if (bet1X) {
        const selection = bet1X.querySelector('.event-selection');
        const oddsSpan = bet1X.querySelector('.event-odds span:not(.svg-icon)');
        if (selection && oddsSpan) {
          options.push({
            selector: '[data-test-id="Odd-4693-4694"] .event-bet',
            selection: selection.textContent.trim(),
            odds: parseFloat(oddsSpan.textContent.replace(',', '.'))
          });
        }
      }
      
      // X2 (Match nul ou victoire √† l'ext√©rieur)
      const betX2 = document.querySelector('[data-test-id="Odd-4693-4695"]');
      if (betX2) {
        const selection = betX2.querySelector('.event-selection');
        const oddsSpan = betX2.querySelector('.event-odds span:not(.svg-icon)');
        if (selection && oddsSpan) {
          options.push({
            selector: '[data-test-id="Odd-4693-4695"] .event-bet',
            selection: selection.textContent.trim(),
            odds: parseFloat(oddsSpan.textContent.replace(',', '.'))
          });
        }
      }
      
      // 12 (Victoire √† domicile ou victoire √† l'ext√©rieur)
      const bet12 = document.querySelector('[data-test-id="Odd-4693-4696"]');
      if (bet12) {
        const selection = bet12.querySelector('.event-selection');
        const oddsSpan = bet12.querySelector('.event-odds span:not(.svg-icon)');
        if (selection && oddsSpan) {
          options.push({
            selector: '[data-test-id="Odd-4693-4696"] .event-bet',
            selection: selection.textContent.trim(),
            odds: parseFloat(oddsSpan.textContent.replace(',', '.'))
          });
        }
      }
      
      return options;
    });
    
    if (doubleChanceOptions.length === 0) {
      console.log("‚ùå Aucune option Double Chance trouv√©e");
      return { success: false };
    }
    
    console.log(`‚úÖ Options trouv√©es: ${doubleChanceOptions.map(o => `${o.selection} @${o.odds}`).join(', ')}`);
    
    // Filtrer les options selon la c√¥te maximale
    const validOptions = doubleChanceOptions.filter(option => option.odds <= config.coteMaxPari);
    
    if (validOptions.length === 0) {
      console.log(`‚ùå Aucune option Double Chance sous la c√¥te maximale ${config.coteMaxPari}`);
      return { success: false };
    }
    
    // Trouver l'option avec la cote la plus basse (plus s√ªre)
    const bestOption = validOptions.reduce((prev, current) => 
      current.odds < prev.odds ? current : prev
    );
    
    console.log(`üíØ Meilleure option: ${bestOption.selection} @${bestOption.odds}`);
    
    // Cliquer sur la meilleure option avec la m√©thode de app5.js
    console.log(`üî• Tentative de s√©lection de l'option ${bestOption.selection} avec la c√¥te ${bestOption.odds}`);
    
    // V√©rifier que l'√©l√©ment est visible et cliquable
    const elementStatus = await page.evaluate((selector) => {
      const element = document.querySelector(selector);
      if (!element) return { exists: false };
      
      const rect = element.getBoundingClientRect();
      const isVisible = rect.top >= 0 && rect.left >= 0 && 
                       rect.bottom <= window.innerHeight && rect.right <= window.innerWidth;
      
      // V√©rifier si l'√©l√©ment est masqu√© par d'autres √©l√©ments
      const isClickable = document.elementFromPoint(rect.left + rect.width/2, rect.top + rect.height/2) === element;
      
      return { 
        exists: true, 
        isVisible, 
        isClickable,
        position: {
          top: rect.top,
          left: rect.left,
          bottom: rect.bottom,
          right: rect.right,
          width: rect.width,
          height: rect.height
        }
      };
    }, bestOption.selector);
    
    console.log(`üìä √âtat de l'√©l√©ment √† cliquer:`, JSON.stringify(elementStatus));
    
    // Si l'√©l√©ment n'est pas visible, faire d√©filer jusqu'√† lui
    if (elementStatus.exists && !elementStatus.isVisible) {
      console.log(`üö® √âl√©ment existe mais n'est pas visible, d√©filement n√©cessaire`);
      await page.evaluate((selector) => {
        const element = document.querySelector(selector);
        if (element) element.scrollIntoView({ behavior: 'smooth', block: 'center' });
      }, bestOption.selector);
      await delay(1000);
    }
    
    // Utiliser la m√©thode de clic avec v√©rification comme dans app5.js
    let clickSuccess = false;
    for (let attempt = 1; attempt <= 3; attempt++) {
      try {
        console.log(`\nüëâ Tentative ${attempt}/3 de cliquer sur l'option ${bestOption.selection}`);
        
        // Essayer de cliquer avec plusieurs m√©thodes
        if (attempt === 1) {
          // M√©thode 1: Clic standard
          await page.click(bestOption.selector);
        } else if (attempt === 2) {
          // M√©thode 2: Clic avec JavaScript
          await page.evaluate((selector) => {
            const element = document.querySelector(selector);
            if (element) {
              element.click();
              // Simuler aussi un √©v√©nement de clic
              element.dispatchEvent(new MouseEvent('click', { bubbles: true }));
            }
          }, bestOption.selector);
        } else {
          // M√©thode 3: Clic avec coordonn√©es
          const elementRect = await page.evaluate((selector) => {
            const element = document.querySelector(selector);
            if (!element) return null;
            const rect = element.getBoundingClientRect();
            return { x: rect.x + rect.width/2, y: rect.y + rect.height/2 };
          }, bestOption.selector);
          
          if (elementRect) {
            await page.mouse.click(elementRect.x, elementRect.y);
          }
        }
        
        await delay(3000); // Attendre plus longtemps
        
        // V√©rifier que l'option est s√©lectionn√©e
        const isSelected = await page.evaluate((selector) => {
          const element = document.querySelector(selector);
          if (!element) return false;
          
          // V√©rifier plusieurs classes possibles qui indiquent une s√©lection
          const hasSelectedClass = element.classList.contains('selected');
          const hasActiveClass = element.classList.contains('active');
          const hasEventBetSelectedClass = element.classList.contains('event-bet--selected');
          const hasDataSelected = element.hasAttribute('data-selected');
          const hasAriaSelected = element.getAttribute('aria-selected') === 'true';
          
          console.log('Classes de l\'\u00e9l\u00e9ment:', element.className);
          console.log('Attributs de l\'\u00e9l\u00e9ment:', {
            'data-selected': element.getAttribute('data-selected'),
            'aria-selected': element.getAttribute('aria-selected')
          });
          
          return hasSelectedClass || hasActiveClass || hasEventBetSelectedClass || 
                 hasDataSelected || hasAriaSelected;
        }, bestOption.selector);

        if (isSelected) {
          clickSuccess = true;
          console.log("‚úÖ Option Double Chance s√©lectionn√©e avec succ√®s!");
          
          // Prendre une capture d'√©cran apr√®s s√©lection r√©ussie
          const successTimestamp = new Date().toISOString().replace(/:/g, '-');
          await page.screenshot({ path: `selection-success-${successTimestamp}.png`, fullPage: false });
          console.log(`üì∑ Capture d'√©cran apr√®s s√©lection r√©ussie: selection-success-${successTimestamp}.png`);
          
          break;
        } else {
          console.log(`‚ö†Ô∏è Tentative ${attempt}/3 - Pas encore s√©lectionn√©`);
          if (attempt < 3) await delay(2000);
        }
      } catch (error) {
        console.log(`‚ö†Ô∏è Tentative ${attempt}/3 √©chou√©e:`, error.message);
        if (attempt < 3) await delay(2000);
      }
    }
    
    if (clickSuccess) {
      return { 
        success: true, 
        option: bestOption.selection, 
        cote: bestOption.odds 
      };
    } else {
      throw new Error("Impossible de s√©lectionner l'option apr√®s plusieurs tentatives");
    }
    
  } catch (error) {
    console.error("‚ùå Erreur lors de la s√©lection Double Chance:", error.message);
    
    // Prendre une capture d'√©cran en cas d'erreur
    try {
      const errorTimestamp = new Date().toISOString().replace(/:/g, '-');
      await page.screenshot({ path: `error-double-chance-${errorTimestamp}.png`, fullPage: false });
      console.log(`üì∑ Capture d'√©cran de l'erreur: error-double-chance-${errorTimestamp}.png`);
    } catch (screenshotError) {
      console.log(`‚ö†Ô∏è Impossible de prendre une capture d'√©cran de l'erreur:`, screenshotError.message);
    }
    
    return { success: false };
  }
}

/**
 * S√©lectionne la meilleure option de victoire simple (1, X, 2) directement depuis la liste des matchs
 * @param {Object} page - Instance de la page Puppeteer
 * @param {Object} match - Donn√©es du match avec l'ID de l'√©v√©nement
 * @param {Object} config - Configuration des paris avec c√¥te maximale
 * @returns {Promise<Object>} - R√©sultat de la s√©lection {success, option, cote}
 */
async function selectSingleWinFromList(page, match, config) {
  console.log(`üéØ Recherche de l'option Victoire Simple pour ${match.homeTeam} vs ${match.awayTeam}...`);
  
  try {
    // V√©rifier si la page est bien charg√©e
    console.log(`üîç V√©rification de l'√©tat de la page avant recherche Victoire Simple depuis la liste...`);
    const pageUrl = await page.url();
    console.log(`üåê URL actuelle: ${pageUrl}`);
    
    // Extraire l'ID de l'√©v√©nement depuis l'URL du match
    const eventId = match.url.split('/').pop();
    console.log(`üîë ID de l'√©v√©nement: ${eventId}`);
    console.log(`üéÆ Match: ${match.homeTeam} vs ${match.awayTeam}`);
    
    // Chercher d'abord les s√©lecteurs dans le conteneur de l'√©v√©nement
    const eventContainer = `[data-event-id="${eventId}"]`;
    
    // Attendre que le conteneur de l'√©v√©nement soit disponible
    await page.waitForSelector(eventContainer, { timeout: 10000 });
    console.log(`‚úÖ Conteneur de l'√©v√©nement trouv√©: ${eventContainer}`);
    
    // Les vrais s√©lecteurs bas√©s sur l'analyse du HTML fourni
    // Le pattern est: Odd-{marketId}-{outcomeId} o√π marketId change selon l'√©v√©nement
    // Nous devons d'abord identifier le marketId pour cet √©v√©nement
    
    // R√©cup√©rer les s√©lecteurs dynamiques pour cet √©v√©nement sp√©cifique
    const selectors = await page.evaluate((eventId) => {
      const container = document.querySelector(`[data-event-id="${eventId}"]`);
      if (!container) return null;
      
      // Chercher tous les √©l√©ments avec data-test-id qui commencent par "Odd-"
      const oddElements = container.querySelectorAll('[data-test-id^="Odd-"]');
      const foundSelectors = {};
      
      oddElements.forEach(element => {
        const testId = element.getAttribute('data-test-id');
        const selectionElement = element.querySelector('.event-selection');
        const oddsElement = element.querySelector('.event-odds span:not(.svg-icon)');
        
        if (selectionElement && oddsElement) {
          const selection = selectionElement.textContent.trim();
          const odds = parseFloat(oddsElement.textContent.replace(',', '.'));
          
          if (selection === '1') {
            foundSelectors.selector1 = testId;
            foundSelectors.odds1 = odds;
          } else if (selection === 'X') {
            foundSelectors.selectorX = testId;
            foundSelectors.oddsX = odds;
          } else if (selection === '2') {
            foundSelectors.selector2 = testId;
            foundSelectors.odds2 = odds;
          }
        }
      });
      
      return foundSelectors;
    }, eventId);
    
    if (!selectors) {
      console.log(`‚ùå Impossible de trouver le conteneur pour l'√©v√©nement ${eventId}`);
      return { success: false };
    }
    
    console.log(`üìä S√©lecteurs trouv√©s pour l'√©v√©nement ${eventId}:`);
    console.log(`- Option 1: ${selectors.selector1} @${selectors.odds1}`);
    console.log(`- Option X: ${selectors.selectorX} @${selectors.oddsX}`);
    console.log(`- Option 2: ${selectors.selector2} @${selectors.odds2}`);
    
    // Prendre une capture d'√©cran pour d√©bogage
    const timestamp = new Date().toISOString().replace(/:/g, '-');
    await page.screenshot({ path: `match-debug-${timestamp}.png`, fullPage: false });
    console.log(`üì∑ Capture d'√©cran des options enregistr√©e: match-debug-${timestamp}.png`);
    
    // Mettre en √©vidence le match pour le d√©bogage
    await page.evaluate((eventId) => {
      const elements = document.querySelectorAll(`[data-event-id="${eventId}"]`);
      console.log(`√âl√©ments trouv√©s avec data-event-id=${eventId}: ${elements.length}`);
      elements.forEach(el => {
        el.style.border = '3px solid red';
        el.style.backgroundColor = 'rgba(255, 0, 0, 0.2)';
      });
    }, eventId);
    
    // V√©rifier que nous avons au moins les options 1 et 2 (on exclut X pour victoire simple)
    if (!selectors.selector1 || !selectors.selector2) {
      console.log(`‚ùå Options de victoire simple incompl√®tes pour l'√©v√©nement ${eventId}`);
      return { success: false };
    }
    
    // Cr√©er les options disponibles bas√©es sur les s√©lecteurs trouv√©s
    const singleWinOptions = [];
    
    // Option 1 (Victoire √† domicile)
    if (selectors.selector1 && selectors.odds1) {
      singleWinOptions.push({
        selector: `[data-test-id="${selectors.selector1}"] .event-bet`,
        selection: '1',
        odds: selectors.odds1,
        type: '1'
      });
    }
    
    // Option 2 (Victoire √† l'ext√©rieur)
    if (selectors.selector2 && selectors.odds2) {
      singleWinOptions.push({
        selector: `[data-test-id="${selectors.selector2}"] .event-bet`,
        selection: '2',
        odds: selectors.odds2,
        type: '2'
      });
    }
    
    if (singleWinOptions.length === 0) {
      console.log("‚ùå Aucune option Victoire Simple trouv√©e dans la liste");
      return { success: false };
    }
    
    console.log(`‚úÖ Options trouv√©es: ${singleWinOptions.map(o => `${o.selection} @${o.odds}`).join(', ')}`);
    
    // Filtrer les options selon la c√¥te maximale et le type (1 ou 2, pas X)
    const validOptions = singleWinOptions.filter(option => 
      option.odds <= config.coteMaxPari && (option.type === '1' || option.type === '2')
    );
    
    if (validOptions.length === 0) {
      console.log(`‚ùå Aucune option Victoire Simple valide sous la c√¥te maximale ${config.coteMaxPari}`);
      return { success: false };
    }
    
    // Trouver l'option avec la cote la plus basse (plus s√ªre)
    const bestOption = validOptions.reduce((prev, current) => 
      current.odds < prev.odds ? current : prev
    );
    
    console.log(`üíØ Meilleure option: ${bestOption.selection} @${bestOption.odds}`);
    
    // Cliquer sur la meilleure option
    console.log(`üî• Tentative de s√©lection de l'option ${bestOption.selection} avec la c√¥te ${bestOption.odds}`);
    
    // V√©rifier que l'√©l√©ment est visible et cliquable
    const elementStatus = await page.evaluate((selector) => {
      const element = document.querySelector(selector);
      if (!element) return { exists: false };
      
      const rect = element.getBoundingClientRect();
      const isVisible = rect.top >= 0 && rect.left >= 0 && 
                       rect.bottom <= window.innerHeight && rect.right <= window.innerWidth;
      
      // V√©rifier si l'√©l√©ment est masqu√© par d'autres √©l√©ments
      const isClickable = document.elementFromPoint(rect.left + rect.width/2, rect.top + rect.height/2) === element;
      
      return { 
        exists: true, 
        isVisible, 
        isClickable,
        position: {
          top: rect.top,
          left: rect.left,
          bottom: rect.bottom,
          right: rect.right,
          width: rect.width,
          height: rect.height
        }
      };
    }, bestOption.selector);
    
    console.log(`üìä √âtat de l'√©l√©ment √† cliquer:`, JSON.stringify(elementStatus));
    
    // Si l'√©l√©ment n'est pas visible, faire d√©filer jusqu'√† lui
    if (elementStatus.exists && !elementStatus.isVisible) {
      console.log(`üö® √âl√©ment existe mais n'est pas visible, d√©filement n√©cessaire`);
      await page.evaluate((selector) => {
        const element = document.querySelector(selector);
        if (element) element.scrollIntoView({ behavior: 'smooth', block: 'center' });
      }, bestOption.selector);
      await delay(1000);
    }
    
    // Utiliser la m√©thode de clic avec v√©rification comme dans app5.js
    let clickSuccess = false;
    for (let attempt = 1; attempt <= 3; attempt++) {
      try {
        console.log(`\nüëâ Tentative ${attempt}/3 de cliquer sur l'option ${bestOption.selection}`);
        
        // Essayer de cliquer avec plusieurs m√©thodes
        if (attempt === 1) {
          // M√©thode 1: Clic standard
          await page.click(bestOption.selector);
        } else if (attempt === 2) {
          // M√©thode 2: Clic avec JavaScript
          await page.evaluate((selector) => {
            const element = document.querySelector(selector);
            if (element) {
              element.click();
              // Simuler aussi un √©v√©nement de clic
              element.dispatchEvent(new MouseEvent('click', { bubbles: true }));
            }
          }, bestOption.selector);
        } else {
          // M√©thode 3: Clic avec coordonn√©es
          const elementRect = await page.evaluate((selector) => {
            const element = document.querySelector(selector);
            if (!element) return null;
            const rect = element.getBoundingClientRect();
            return { x: rect.x + rect.width/2, y: rect.y + rect.height/2 };
          }, bestOption.selector);
          
          if (elementRect) {
            await page.mouse.click(elementRect.x, elementRect.y);
          }
        }
        
        await delay(3000); // Attendre plus longtemps
        
        // V√©rifier que l'option est s√©lectionn√©e
        const isSelected = await page.evaluate((selector) => {
          const element = document.querySelector(selector);
          if (!element) return false;
          
          // V√©rifier plusieurs classes possibles qui indiquent une s√©lection
          const hasSelectedClass = element.classList.contains('selected');
          const hasActiveClass = element.classList.contains('active');
          const hasEventBetSelectedClass = element.classList.contains('event-bet--selected');
          const hasDataSelected = element.hasAttribute('data-selected');
          const hasAriaSelected = element.getAttribute('aria-selected') === 'true';
          
          console.log('Classes de l\'\u00e9l\u00e9ment:', element.className);
          console.log('Attributs de l\'\u00e9l\u00e9ment:', {
            'data-selected': element.getAttribute('data-selected'),
            'aria-selected': element.getAttribute('aria-selected')
          });
          
          return hasSelectedClass || hasActiveClass || hasEventBetSelectedClass || 
                 hasDataSelected || hasAriaSelected;
        }, bestOption.selector);

        if (isSelected) {
          clickSuccess = true;
          console.log("‚úÖ Option Victoire Simple s√©lectionn√©e avec succ√®s!");
          
          // Prendre une capture d'√©cran apr√®s s√©lection r√©ussie
          const successTimestamp = new Date().toISOString().replace(/:/g, '-');
          await page.screenshot({ path: `selection-success-${successTimestamp}.png`, fullPage: false });
          console.log(`üì∑ Capture d'√©cran apr√®s s√©lection r√©ussie: selection-success-${successTimestamp}.png`);
          
          break;
        } else {
          console.log(`‚ö†Ô∏è Tentative ${attempt}/3 - Pas encore s√©lectionn√©`);
          if (attempt < 3) await delay(2000);
        }
      } catch (error) {
        console.log(`‚ö†Ô∏è Tentative ${attempt}/3 √©chou√©e:`, error.message);
        if (attempt < 3) await delay(2000);
      }
    }
    
    if (clickSuccess) {
      return { 
        success: true, 
        option: bestOption.selection, 
        cote: bestOption.odds 
      };
    } else {
      throw new Error("Impossible de s√©lectionner l'option apr√®s plusieurs tentatives");
    }
    
  } catch (error) {
    console.error("‚ùå Erreur lors de la s√©lection Victoire Simple depuis la liste:", error.message);
    
    // Prendre une capture d'√©cran en cas d'erreur
    try {
      const errorTimestamp = new Date().toISOString().replace(/:/g, '-');
      await page.screenshot({ path: `error-single-win-list-${errorTimestamp}.png`, fullPage: false });
      console.log(`üì∑ Capture d'√©cran de l'erreur: error-single-win-list-${errorTimestamp}.png`);
    } catch (screenshotError) {
      console.log(`‚ö†Ô∏è Impossible de prendre une capture d'√©cran de l'erreur:`, screenshotError.message);
    }
    
    return { success: false };
  }
}

/**
 * S√©lectionne la meilleure option de victoire simple pour un match
 * @param {Object} page - Instance de la page Puppeteer
 * @param {Object} config - Configuration des paris avec c√¥te maximale
 * @returns {Object} - R√©sultat de la s√©lection {success, option, cote}
 */
async function selectSingleWin(page, config) {
  console.log("üéØ Recherche de l'option Victoire Simple...");
  
  try {
    // V√©rifier si la page est bien charg√©e
    console.log(`üîç V√©rification de l'√©tat de la page avant recherche Victoire Simple...`);
    const pageUrl = await page.url();
    console.log(`üåê URL actuelle: ${pageUrl}`);
    
    // Attendre que la section 1X2 soit disponible
    console.log(`‚è≥ Attente de la section 1X2 [data-test-id="market-4703"]...`);
    await page.waitForSelector('[data-test-id="market-4703"]', { timeout: 15000 });
    console.log("‚úÖ Section 1X2 trouv√©e!");
    
    // Prendre une capture d'√©cran pour d√©bogage
    const timestamp = new Date().toISOString().replace(/:/g, '-');
    await page.screenshot({ path: `match-options-${timestamp}.png`, fullPage: false });
    console.log(`üì∑ Capture d'√©cran des options enregistr√©e: match-options-${timestamp}.png`);
    
    // D√©finir les s√©lecteurs pour les options 1X2
    const selector1 = '[data-test-id="Odd-4703-4704"]'; // 1
    const selectorX = '[data-test-id="Odd-4703-4705"]'; // X
    const selector2 = '[data-test-id="Odd-4703-4706"]'; // 2
    
    console.log(`‚è≥ Attente des s√©lecteurs pour les options de pari:`);
    console.log(`- Option 1: ${selector1}`);
    console.log(`- Option X: ${selectorX}`);
    console.log(`- Option 2: ${selector2}`);
    
    // Attendre qu'au moins une des options soit disponible
    const results = await Promise.allSettled([
      page.waitForSelector(selector1, { timeout: 5000 }),
      page.waitForSelector(selectorX, { timeout: 5000 }),
      page.waitForSelector(selector2, { timeout: 5000 })
    ]);
    
    console.log(`üìä R√©sultats de l'attente des s√©lecteurs:`);
    console.log(`- Option 1: ${results[0].status === 'fulfilled' ? '‚úÖ Trouv√©e' : '‚ùå Non trouv√©e'}`);
    console.log(`- Option X: ${results[1].status === 'fulfilled' ? '‚úÖ Trouv√©e' : '‚ùå Non trouv√©e'}`);
    console.log(`- Option 2: ${results[2].status === 'fulfilled' ? '‚úÖ Trouv√©e' : '‚ùå Non trouv√©e'}`);
    
    // Mettre en √©vidence les options pour le d√©bogage
    await page.evaluate(() => {
      const elements = document.querySelectorAll('[data-test-id^="Odd-4703-470"]');
      console.log(`√âl√©ments trouv√©s avec data-test-id^="Odd-4703-470": ${elements.length}`);
      elements.forEach(el => {
        el.style.border = '3px solid red';
        el.style.backgroundColor = 'rgba(255, 0, 0, 0.2)';
      });
    });
    
    // V√©rifier la pr√©sence des s√©lecteurs sp√©cifiques avant d'extraire les donn√©es
    const selectorsPresent = await page.evaluate(() => {
      const selectors = [
        '[data-test-id="Odd-4703-4704"]', // 1
        '[data-test-id="Odd-4703-4705"]', // X
        '[data-test-id="Odd-4703-4706"]'  // 2
      ];
      
      const results = {};
      selectors.forEach(selector => {
        const element = document.querySelector(selector);
        results[selector] = {
          exists: !!element,
          hasSelection: element && !!element.querySelector('.event-selection'),
          hasOdds: element && !!element.querySelector('.event-odds span:not(.svg-icon)')
        };
      });
      
      return results;
    });
    
    console.log(`üìä √âtat des s√©lecteurs Victoire Simple:`);
    console.log(`- 1 [data-test-id="Odd-4703-4704"]: ${JSON.stringify(selectorsPresent['[data-test-id="Odd-4703-4704"]'])}`);
    console.log(`- X [data-test-id="Odd-4703-4705"]: ${JSON.stringify(selectorsPresent['[data-test-id="Odd-4703-4705"]'])}`);
    console.log(`- 2 [data-test-id="Odd-4703-4706"]: ${JSON.stringify(selectorsPresent['[data-test-id="Odd-4703-4706"]'])}`);
    
    // R√©cup√©rer les options disponibles avec les s√©lecteurs sp√©cifiques
    const singleWinOptions = await page.evaluate(() => {
      const options = [];
      
      // 1 (Victoire √† domicile)
      const bet1 = document.querySelector('[data-test-id="Odd-4703-4704"]');
      if (bet1) {
        const selection = bet1.querySelector('.event-selection');
        const oddsSpan = bet1.querySelector('.event-odds span:not(.svg-icon)');
        if (selection && oddsSpan) {
          options.push({
            selector: '[data-test-id="Odd-4703-4704"] .event-bet',
            selection: selection.textContent.trim(),
            odds: parseFloat(oddsSpan.textContent.replace(',', '.')),
            type: '1' // Victoire √† domicile
          });
        }
      }
      
      // X (Match nul)
      const betX = document.querySelector('[data-test-id="Odd-4703-4705"]');
      if (betX) {
        const selection = betX.querySelector('.event-selection');
        const oddsSpan = betX.querySelector('.event-odds span:not(.svg-icon)');
        if (selection && oddsSpan) {
          options.push({
            selector: '[data-test-id="Odd-4703-4705"] .event-bet',
            selection: selection.textContent.trim(),
            odds: parseFloat(oddsSpan.textContent.replace(',', '.')),
            type: 'X' // Match nul
          });
        }
      }
      
      // 2 (Victoire √† l'ext√©rieur)
      const bet2 = document.querySelector('[data-test-id="Odd-4703-4706"]');
      if (bet2) {
        const selection = bet2.querySelector('.event-selection');
        const oddsSpan = bet2.querySelector('.event-odds span:not(.svg-icon)');
        if (selection && oddsSpan) {
          options.push({
            selector: '[data-test-id="Odd-4703-4706"] .event-bet',
            selection: selection.textContent.trim(),
            odds: parseFloat(oddsSpan.textContent.replace(',', '.')),
            type: '2' // Victoire √† l'ext√©rieur
          });
        }
      }
      
      return options;
    });
    
    if (singleWinOptions.length === 0) {
      console.log("‚ùå Aucune option Victoire Simple trouv√©e");
      return { success: false };
    }
    
    console.log(`‚úÖ Options trouv√©es: ${singleWinOptions.map(o => `${o.selection} (${o.type}) @${o.odds}`).join(', ')}`);
    
    // Filtrer les options selon la c√¥te maximale et le type (1 ou 2, pas X)
    const validOptions = singleWinOptions.filter(option => 
      option.odds <= config.coteMaxPari && (option.type === '1' || option.type === '2')
    );
    
    if (validOptions.length === 0) {
      console.log(`‚ùå Aucune option Victoire Simple valide sous la c√¥te maximale ${config.coteMaxPari}`);
      return { success: false };
    }
    
    // Trouver l'option avec la cote la plus basse (plus s√ªre)
    const bestOption = validOptions.reduce((prev, current) => 
      current.odds < prev.odds ? current : prev
    );
    
    console.log(`üíØ Meilleure option: ${bestOption.selection} (${bestOption.type}) @${bestOption.odds}`);
    
    // Cliquer sur la meilleure option
    console.log(`üî• Tentative de s√©lection de l'option ${bestOption.selection} avec la c√¥te ${bestOption.odds}`);
    
    // V√©rifier que l'√©l√©ment est visible et cliquable
    const elementStatus = await page.evaluate((selector) => {
      const element = document.querySelector(selector);
      if (!element) return { exists: false };
      
      const rect = element.getBoundingClientRect();
      const isVisible = rect.top >= 0 && rect.left >= 0 && 
                       rect.bottom <= window.innerHeight && rect.right <= window.innerWidth;
      
      // V√©rifier si l'√©l√©ment est masqu√© par d'autres √©l√©ments
      const isClickable = document.elementFromPoint(rect.left + rect.width/2, rect.top + rect.height/2) === element;
      
      return { 
        exists: true, 
        isVisible, 
        isClickable,
        position: {
          top: rect.top,
          left: rect.left,
          bottom: rect.bottom,
          right: rect.right,
          width: rect.width,
          height: rect.height
        }
      };
    }, bestOption.selector);
    
    console.log(`üìä √âtat de l'√©l√©ment √† cliquer:`, JSON.stringify(elementStatus));
    
    // Si l'√©l√©ment n'est pas visible, faire d√©filer jusqu'√† lui
    if (elementStatus.exists && !elementStatus.isVisible) {
      console.log(`üö® √âl√©ment existe mais n'est pas visible, d√©filement n√©cessaire`);
      await page.evaluate((selector) => {
        const element = document.querySelector(selector);
        if (element) element.scrollIntoView({ behavior: 'smooth', block: 'center' });
      }, bestOption.selector);
      await delay(1000);
    }
    
    // Utiliser la m√©thode de clic avec v√©rification comme dans app5.js
    let clickSuccess = false;
    for (let attempt = 1; attempt <= 3; attempt++) {
      try {
        console.log(`\nüëâ Tentative ${attempt}/3 de cliquer sur l'option ${bestOption.selection}`);
        
        // Essayer de cliquer avec plusieurs m√©thodes
        if (attempt === 1) {
          // M√©thode 1: Clic standard
          await page.click(bestOption.selector);
        } else if (attempt === 2) {
          // M√©thode 2: Clic avec JavaScript
          await page.evaluate((selector) => {
            const element = document.querySelector(selector);
            if (element) {
              element.click();
              // Simuler aussi un √©v√©nement de clic
              element.dispatchEvent(new MouseEvent('click', { bubbles: true }));
            }
          }, bestOption.selector);
        } else {
          // M√©thode 3: Clic avec coordonn√©es
          const elementRect = await page.evaluate((selector) => {
            const element = document.querySelector(selector);
            if (!element) return null;
            const rect = element.getBoundingClientRect();
            return { x: rect.x + rect.width/2, y: rect.y + rect.height/2 };
          }, bestOption.selector);
          
          if (elementRect) {
            await page.mouse.click(elementRect.x, elementRect.y);
          }
        }
        
        await delay(3000); // Attendre plus longtemps
        
        // V√©rifier que l'option est s√©lectionn√©e
        const isSelected = await page.evaluate((selector) => {
          const element = document.querySelector(selector);
          if (!element) return false;
          
          // V√©rifier plusieurs classes possibles qui indiquent une s√©lection
          const hasSelectedClass = element.classList.contains('selected');
          const hasActiveClass = element.classList.contains('active');
          const hasEventBetSelectedClass = element.classList.contains('event-bet--selected');
          const hasDataSelected = element.hasAttribute('data-selected');
          const hasAriaSelected = element.getAttribute('aria-selected') === 'true';
          
          console.log('Classes de l\'\u00e9l\u00e9ment:', element.className);
          console.log('Attributs de l\'\u00e9l\u00e9ment:', {
            'data-selected': element.getAttribute('data-selected'),
            'aria-selected': element.getAttribute('aria-selected')
          });
          
          return hasSelectedClass || hasActiveClass || hasEventBetSelectedClass || 
                 hasDataSelected || hasAriaSelected;
        }, bestOption.selector);

        if (isSelected) {
          clickSuccess = true;
          console.log("‚úÖ Option Victoire Simple s√©lectionn√©e avec succ√®s!");
          
          // Prendre une capture d'√©cran apr√®s s√©lection r√©ussie
          const successTimestamp = new Date().toISOString().replace(/:/g, '-');
          await page.screenshot({ path: `selection-success-${successTimestamp}.png`, fullPage: false });
          console.log(`üì∑ Capture d'√©cran apr√®s s√©lection r√©ussie: selection-success-${successTimestamp}.png`);
          
          break;
        } else {
          console.log(`‚ö†Ô∏è Tentative ${attempt}/3 - Pas encore s√©lectionn√©`);
          if (attempt < 3) await delay(2000);
        }
      } catch (error) {
        console.log(`‚ö†Ô∏è Tentative ${attempt}/3 √©chou√©e:`, error.message);
        if (attempt < 3) await delay(2000);
      }
    }
    
    if (clickSuccess) {
      return { 
        success: true, 
        option: bestOption.selection, 
        cote: bestOption.odds 
      };
    } else {
      throw new Error("Impossible de s√©lectionner l'option apr√®s plusieurs tentatives");
    }
    
  } catch (error) {
    console.error("‚ùå Erreur lors de la s√©lection Victoire Simple:", error.message);
    
    // Prendre une capture d'√©cran en cas d'erreur
    try {
      const errorTimestamp = new Date().toISOString().replace(/:/g, '-');
      await page.screenshot({ path: `error-single-win-${errorTimestamp}.png`, fullPage: false });
      console.log(`üì∑ Capture d'√©cran de l'erreur: error-single-win-${errorTimestamp}.png`);
    } catch (screenshotError) {
      console.log(`‚ö†Ô∏è Impossible de prendre une capture d'√©cran de l'erreur:`, screenshotError.message);
    }
    
    return { success: false };
  }
}

/**
 * Traite un match pour placer un pari selon la strat√©gie choisie
 * @param {Object} page - Instance de la page Puppeteer
 * @param {Object} match - Donn√©es du match
 * @param {Object} config - Configuration des paris
 * @returns {Object} - R√©sultat du traitement {success, cote}
 */
async function processMatch(page, match, config) {
  console.log(`\nüèÜ Traitement du match: ${match.homeTeam} vs ${match.awayTeam}`);
  console.log(`‚è∞ Heure: ${match.time} | üèÅ Comp√©tition: ${match.competition}`);
  
  try {
    let result;
    
    // Pour la strat√©gie Victoire Simple, s√©lectionner directement depuis la liste des matchs
    if (config.strategie === '2') { // '2' correspond √† "Juste victoire"
      console.log("üìç Strat√©gie: Victoire Simple directement depuis la liste");
      result = await selectSingleWinFromList(page, match, config);
      
      if (result.success) {
        console.log(`‚úÖ Option s√©lectionn√©e avec succ√®s depuis la liste: ${result.option} @${result.cote}`);
        return { 
          success: true,
          cote: result.cote,
          option: result.option
        };
      } else {
        console.log("‚ö†Ô∏è Impossible de s√©lectionner l'option depuis la liste");
        return { success: false };
      }
    }
    
    // Pour Double Chance, naviguer vers la page du match
    console.log(`üîé Navigation vers: ${match.url}`);
    await page.goto(match.url, { 
      waitUntil: 'networkidle2', 
      timeout: 30000 
    });
    
    // Attendre que la page soit compl√®tement charg√©e
    await delay(3000); // R√©duire le d√©lai pour acc√©l√©rer le processus
    
    // Attendre que le contenu principal soit charg√©
    try {
      await page.waitForSelector('.event-container', { timeout: 10000 });
      console.log("‚úÖ Page du match charg√©e");
    } catch (error) {
      console.log("‚ö†Ô∏è Timeout en attendant le conteneur de l'√©v√©nement");
    }
    
    // Prendre une capture d'√©cran pour d√©bogage
    const timestamp = new Date().toISOString().replace(/:/g, '-');
    await page.screenshot({ path: `match-debug-${timestamp}.png`, fullPage: false });
    console.log(`üì∑ Capture d'√©cran de d√©bogage enregistr√©e`);
    
    // V√©rifier si la page contient les √©l√©ments attendus
    const pageStatus = await page.evaluate(() => {
      // V√©rifier les march√©s disponibles
      const market1 = document.querySelector('[data-test-id="market-1"]');
      const market4693 = document.querySelector('[data-test-id="market-4693"]');
      
      // V√©rifier les options de paris
      const singleWinOptions = [
        document.querySelector('[data-test-id="Odd-1-1"]'),
        document.querySelector('[data-test-id="Odd-1-2"]'),
        document.querySelector('[data-test-id="Odd-1-3"]')
      ];
      
      const doubleChanceOptions = [
        document.querySelector('[data-test-id="Odd-4693-4694"]'),
        document.querySelector('[data-test-id="Odd-4693-4695"]'),
        document.querySelector('[data-test-id="Odd-4693-4696"]')
      ];
      
      // V√©rifier √©galement les s√©lecteurs alternatifs qui pourraient √™tre utilis√©s
      const alternativeSingleWinOptions = document.querySelectorAll('.event-bet');
      const alternativeDoubleChanceOptions = document.querySelectorAll('.market-option');
      
      // Collecter les classes et IDs pour d√©bogage
      const allMarkets = Array.from(document.querySelectorAll('[data-test-id*="market-"]'))
        .map(el => el.getAttribute('data-test-id'));
      
      return { 
        hasMarket1: !!market1, 
        hasMarket4693: !!market4693,
        singleWinOptionsCount: singleWinOptions.filter(Boolean).length,
        doubleChanceOptionsCount: doubleChanceOptions.filter(Boolean).length,
        alternativeSingleWinOptionsCount: alternativeSingleWinOptions.length,
        alternativeDoubleChanceOptionsCount: alternativeDoubleChanceOptions.length,
        allMarkets: allMarkets.slice(0, 10) // Limiter √† 10 pour √©viter des logs trop longs
      };
    });
    
    console.log(`üîç D√©tection des march√©s:`);
    console.log(`- 1X2 (market-1): ${pageStatus.hasMarket1 ? '‚úÖ Pr√©sent' : '‚ùå Absent'}`);
    console.log(`- Double Chance (market-4693): ${pageStatus.hasMarket4693 ? '‚úÖ Pr√©sent' : '‚ùå Absent'}`);
    console.log(`- Options Victoire Simple d√©tect√©es: ${pageStatus.singleWinOptionsCount}/3`);
    console.log(`- Options Double Chance d√©tect√©es: ${pageStatus.doubleChanceOptionsCount}/3`);
    console.log(`- Options alternatives: Simple: ${pageStatus.alternativeSingleWinOptionsCount}, Double: ${pageStatus.alternativeDoubleChanceOptionsCount}`);
    console.log(`- March√©s disponibles: ${pageStatus.allMarkets.join(', ')}`);
    
    // Si les s√©lecteurs standard ne fonctionnent pas, essayons de faire d√©filer la page
    if (!pageStatus.hasMarket1 && !pageStatus.hasMarket4693) {
      console.log("üî¥ Aucun march√© d√©tect√©, tentative de d√©filement...");
      await page.evaluate(() => {
        window.scrollBy(0, 500);
      });
      await delay(2000);
    }
    
    // S√©lectionner l'option selon la strat√©gie choisie (seulement Double Chance ici)
    if (config.strategie === '1') { // '1' correspond √† "Double chance"
      console.log("üìç Strat√©gie: Double Chance");
      result = await selectDoubleChance(page, config);
    } else {
      console.log("‚ùå Erreur: Cette partie du code ne devrait √™tre atteinte que pour Double Chance");
      return { success: false };
    }
    
    if (!result.success) {
      console.log("‚ùå √âchec de la s√©lection de l'option de pari");
      return { success: false };
    }
    
    console.log(`‚úÖ Option s√©lectionn√©e avec succ√®s: ${result.option} @${result.cote}`);
    
    // V√©rifier si la cote est dans la plage acceptable
    if (result.cote < config.coteTarget || result.cote > config.coteMaxPari) {
      console.log(`‚ö†Ô∏è Cote ${result.cote} hors plage [${config.coteTarget} - ${config.coteMaxPari}]`);
      return { success: false };
    }
    
    // Si le placement automatique est activ√©, placer le pari
    if (config.placementAuto) {
      console.log("üí∞ Placement automatique activ√©");
      const betResult = await placeBet(page, config.montantMise);
      if (betResult.success) {
        console.log(`‚úÖ Pari plac√© avec succ√®s: ${config.montantMise} sur ${result.option} @${result.cote}`);
      } else {
        console.log("‚ùå √âchec du placement du pari");
        return { success: false };
      }
    } else {
      console.log("‚ÑπÔ∏è Placement automatique d√©sactiv√©, attente de l'action utilisateur");
      // Attendre que l'utilisateur place manuellement le pari
      await delay(10000);
    }
    
    return { 
      success: true,
      cote: result.cote
    };
    
  } catch (error) {
    console.error(`‚ùå Erreur lors du traitement du match: ${error.message}`);
    return { success: false };
  }
}

/**
 * Place un pari avec le montant sp√©cifi√©
 * @param {Object} page - Instance de la page Puppeteer
 * @param {number} amount - Montant du pari
 * @returns {boolean} - Succ√®s du placement du pari
 */
async function placeBet(page, amount) {
  console.log(`üí∞ Placement du pari: ${amount}`);
  
  try {
    // V√©rifier que le coupon est visible
    await page.waitForSelector('.betslip-container', { timeout: 15000 });
    
    // Effacer le champ de mise et saisir le montant avec r√©essais
    let inputSuccess = false;
    for (let attempt = 1; attempt <= 3; attempt++) {
      try {
        await page.focus('#betslip-form-stake-input');
        await page.evaluate(() => document.querySelector('#betslip-form-stake-input').value = '');
        await page.type('#betslip-form-stake-input', amount.toString());
        
        // V√©rifier que le montant a bien √©t√© saisi
        const inputValue = await page.evaluate(() => {
          const input = document.querySelector('#betslip-form-stake-input');
          return input ? input.value : '';
        });
        
        if (inputValue === amount.toString()) {
          console.log(`‚úÖ Montant saisi correctement: ${amount}`);
          inputSuccess = true;
          break;
        } else {
          console.log(`‚ö†Ô∏è Tentative ${attempt}/3 - Montant non saisi correctement: ${inputValue}`);
          await delay(1000);
        }
      } catch (error) {
        console.log(`‚ö†Ô∏è Tentative ${attempt}/3 - Erreur de saisie: ${error.message}`);
        await delay(1000);
      }
    }
    
    if (!inputSuccess) {
      throw new Error("Impossible de saisir le montant apr√®s plusieurs tentatives");
    }
    
    // Attendre et cliquer sur le bouton de placement avec notre fonction am√©lior√©e
    const clickSuccess = await clickWithRetry(page, '.place-bet.button-primary', 5, 2000);
    
    if (!clickSuccess) {
      throw new Error("Impossible de cliquer sur le bouton de placement du pari");
    }
    
    console.log('üé∞ Pari en cours de placement...');
    
    // Attendre la confirmation du pari
    try {
      await page.waitForSelector('.betslip-receipt', { timeout: 15000 });
      console.log('‚úÖ Pari plac√© avec succ√®s!');
      
      // Prendre une capture d'√©cran de la confirmation
      const timestamp = new Date().toISOString().replace(/:/g, '-');
      await page.screenshot({ path: `bet-confirmation-${timestamp}.png`, fullPage: false });
      console.log(`üì∑ Capture d'√©cran de la confirmation enregistr√©e`);
      
      return true;
    } catch (error) {
      console.error('‚ùå Erreur lors de la confirmation du pari:', error.message);
      return false;
    }
  } catch (error) {
    console.error('‚ùå Erreur lors du placement du pari:', error.message);
    return false;
  }
}

/**
 * Ex√©cute le processus complet de paris
 * @param {Object} page - Instance de la page Puppeteer
 * @param {Array} matches - Liste des matchs disponibles
 * @param {Object} config - Configuration des paris
 * @returns {Object} - R√©sultat du processus {success, parisPlaces}
 */
async function executeBettingProcess(page, matches, config) {
  console.log(`\nüéÆ D√©marrage du processus de paris...`);
  console.log(`üí∏ Montant par pari: ${config.montantMise}`);
  console.log(`üìä Strat√©gie: ${config.strategie === '1' ? 'Double Chance' : 'Victoire Simple'}`);
  console.log(`üé≤ Mode: ${config.modeAleatoire ? 'Al√©atoire' : 'S√©quentiel'}`);
  
  // S√©lectionner les matchs pour parier
  const matchesToBet = selectMatchesToBet(matches, config);
  
  if (matchesToBet.length === 0) {
    console.log(`‚ùå Aucun match ne correspond aux crit√®res de paris.`);
    return { success: false, parisPlaces: 0 };
  }
  
  console.log(`üìç ${matchesToBet.length} matchs s√©lectionn√©s pour paris.`);
  
  
  // Statistiques des s√©lections
  const stats = {
    selections: [],
    coteTotal: 1,
    selectionsReussies: 0,
    selectionsEchouees: 0
  };
  
  // S√©lectionner les matchs jusqu'√† atteindre la cote cible
  for (const match of matchesToBet) {
    console.log(`\nüèÅ S√©lection ${stats.selectionsReussies + 1} - Cote actuelle: ${stats.coteTotal.toFixed(2)}x`);
    console.log(`üéØ Cote cible: ${config.coteTarget}x`);
    
    // Si on a d√©j√† atteint la cote cible, arr√™ter
    if (stats.coteTotal >= config.coteTarget) {
      console.log(`üéâ Cote cible atteinte! ${stats.coteTotal.toFixed(2)}x >= ${config.coteTarget}x`);
      break;
    }
    
    // Traiter le match et s√©lectionner l'option
    const processResult = await processMatch(page, match, config);
    
    if (!processResult.success) {
      console.log(`‚ùå √âchec de la s√©lection pour ce match, passage au suivant...`);
      stats.selectionsEchouees++;
      continue;
    }
    
    // Ajouter la s√©lection aux statistiques
    stats.selections.push({
      match: `${match.homeTeam} vs ${match.awayTeam}`,
      option: processResult.option,
      cote: processResult.cote,
      timestamp: new Date().toISOString()
    });
    
    // Multiplier la cote totale
    stats.coteTotal *= processResult.cote;
    stats.selectionsReussies++;
    
    console.log(`‚úÖ S√©lection r√©ussie: ${processResult.option} @${processResult.cote}`);
    console.log(`üìà Nouvelle cote totale: ${stats.coteTotal.toFixed(2)}x`);
    
    // Pause entre les s√©lections
    const pauseTime = Math.floor(Math.random() * 2000) + 1000; // 1-3 secondes
    console.log(`‚è∞ Pause de ${pauseTime/1000} secondes avant la prochaine s√©lection...`);
    await delay(pauseTime);
  }
  
  // V√©rifier si on a des s√©lections
  if (stats.selectionsReussies === 0) {
    console.log(`‚ùå Aucune s√©lection r√©ussie.`);
    return { success: false, parisPlaces: 0 };
  }
  
  // Afficher le r√©sum√© des s√©lections
  console.log(`\nüìä R√©sum√© des s√©lections:`);
  console.log(`‚úÖ S√©lections r√©ussies: ${stats.selectionsReussies}`);
  console.log(`‚ùå S√©lections √©chou√©es: ${stats.selectionsEchouees}`);
  console.log(`üéØ Cote totale finale: ${stats.coteTotal.toFixed(2)}x`);
  console.log(`üí∞ Gain potentiel: ${(config.montantMise * stats.coteTotal).toFixed(2)}`);
  
  // Placer le pari si le placement automatique est activ√©
  if (config.placementAuto) {
    console.log(`\nüí∞ Placement automatique du pari combin√©...`);
    const betResult = await placeBet(page, config.montantMise);
    
    if (betResult) {
      console.log(`üéâ Pari combin√© plac√© avec succ√®s!`);
      return { success: true, parisPlaces: 1 };
    } else {
      console.log(`‚ùå √âchec du placement du pari combin√©.`);
      return { success: false, parisPlaces: 0 };
    }
  } else {
    console.log(`\n‚ùó Placement manuel requis - Cote totale: ${stats.coteTotal.toFixed(2)}x`);
    return { success: true, parisPlaces: 1 };
  }
}

/**
 * Fonction principale qui ex√©cute tout le processus
 */
async function main() {
  console.log(`\nüéÆ BETPAWA BOT - SCRIPT INT√âGR√â\n`);
  
  // Demander les param√®tres √† l'utilisateur
  const config = await demanderParametres();
  console.log("\nüìù Configuration:", config);
  
  // Initialiser le navigateur
  const browser = await puppeteer.launch({
    headless: false,
    defaultViewport: null,
    args: ['--start-maximized']
  });
  
  const page = await browser.newPage();
  await page.setDefaultNavigationTimeout(60000);
  
  try {
    // Naviguer vers Betpawa
    console.log("\nüîé Navigation vers Betpawa...");
    await page.goto('https://www.betpawa.cm', { waitUntil: 'networkidle2' });
    
    // Connexion automatique si demand√©e
    if (config.connexionAuto) {
      const loginSuccess = await connexionAutomatique(page);
      if (!loginSuccess) {
        throw new Error("Erreur lors de la connexion automatique.");
      }
    } else {
      console.log("\n‚è∞ Veuillez vous connecter manuellement...");
      await page.waitForFunction(() => {
        // V√©rifier si l'utilisateur est connect√© (pr√©sence du solde)
        return document.querySelector('.balance-amount') !== null;
      }, { timeout: 120000 }); // 2 minutes pour se connecter
      console.log("‚úÖ Connexion manuelle d√©tect√©e.");
    }
    
    // Cliquer sur "Tout voir Football"
    const footballButtonClicked = await clickToutVoirFootball(page);
    if (!footballButtonClicked) {
      throw new Error("Impossible de trouver le bouton 'Tout voir Football'.");
    }
    
    // D√©filement pour charger tous les matchs
    await scrollToLoadAllMatches(page);
    
    // Extraire les donn√©es des matchs
    const matchData = await extractMatchData(page);
    
    if (matchData.length === 0) {
      throw new Error("Aucun match n'a √©t√© trouv√©.");
    }
    
    // Sauvegarder les donn√©es des matchs dans un fichier
    const filename = `matchs-${new Date().toISOString().replace(/:/g, '-')}.json`;
    fs.writeFileSync(filename, JSON.stringify(matchData, null, 2));
    console.log(`üíæ Donn√©es des matchs sauvegard√©es dans ${filename}`);
    
    // Ex√©cuter le processus de paris
    const bettingResult = await executeBettingProcess(page, matchData, config);
    
    if (bettingResult.success) {
      console.log(`\nüéâ Processus termin√© avec succ√®s! ${bettingResult.parisPlaces} paris plac√©s.`);
    } else {
      console.log(`\n‚ö†Ô∏è Processus termin√© sans paris r√©ussis.`);
    }
    
  } catch (error) {
    console.error(`\n‚ùå ERREUR: ${error.message}`);
  } finally {
    // Demander √† l'utilisateur s'il veut fermer le navigateur
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
    
    const closeAnswer = await new Promise(resolve => {
      rl.question('\nFermer le navigateur? (o/n): ', answer => {
        rl.close();
        resolve(answer.toLowerCase());
      });
    });
    
    if (closeAnswer === 'o' || closeAnswer === 'oui') {
      await browser.close();
      console.log("\nüîí Navigateur ferm√©. Au revoir!");
    } else {
      console.log("\nüîì Navigateur laiss√© ouvert. Vous pouvez le fermer manuellement.");
    }
  }
}

// Ex√©cuter la fonction principale
main().catch(error => {
  console.error(`\n‚ùå ERREUR FATALE: ${error.message}`);
  process.exit(1);
});
